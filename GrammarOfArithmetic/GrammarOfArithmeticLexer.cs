//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g 2016-12-04 14:57:30

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace  Generated 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class GrammarOfArithmeticLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__9=9;
	public const int T__10=10;
	public const int T__11=11;
	public const int T__12=12;
	public const int T__13=13;
	public const int T__14=14;
	public const int T__15=15;
	public const int EXPONENT=4;
	public const int FLOAT=5;
	public const int ID=6;
	public const int INT=7;
	public const int NEWLINE=8;

    // delegates
    // delegators

	public GrammarOfArithmeticLexer()
	{
		OnCreated();
	}

	public GrammarOfArithmeticLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public GrammarOfArithmeticLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__9() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__9() {}

    // $ANTLR start "T__9"
    [GrammarRule("T__9")]
    private void mT__9()
    {
    	EnterRule_T__9();
    	EnterRule("T__9", 1);
    	TraceIn("T__9", 1);
    		try
    		{
    		int _type = T__9;
    		int _channel = DefaultTokenChannel;
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:9:6: ( '(' )
    		DebugEnterAlt(1);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:9:8: '('
    		{
    		DebugLocation(9, 8);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__9", 1);
    		LeaveRule("T__9", 1);
    		LeaveRule_T__9();
        }
    }
    // $ANTLR end "T__9"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__10() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__10() {}

    // $ANTLR start "T__10"
    [GrammarRule("T__10")]
    private void mT__10()
    {
    	EnterRule_T__10();
    	EnterRule("T__10", 2);
    	TraceIn("T__10", 2);
    		try
    		{
    		int _type = T__10;
    		int _channel = DefaultTokenChannel;
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:10:7: ( ')' )
    		DebugEnterAlt(1);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:10:9: ')'
    		{
    		DebugLocation(10, 9);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__10", 2);
    		LeaveRule("T__10", 2);
    		LeaveRule_T__10();
        }
    }
    // $ANTLR end "T__10"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__11() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__11() {}

    // $ANTLR start "T__11"
    [GrammarRule("T__11")]
    private void mT__11()
    {
    	EnterRule_T__11();
    	EnterRule("T__11", 3);
    	TraceIn("T__11", 3);
    		try
    		{
    		int _type = T__11;
    		int _channel = DefaultTokenChannel;
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:11:7: ( '*' )
    		DebugEnterAlt(1);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:11:9: '*'
    		{
    		DebugLocation(11, 9);
    		Match('*'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__11", 3);
    		LeaveRule("T__11", 3);
    		LeaveRule_T__11();
        }
    }
    // $ANTLR end "T__11"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__12() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__12() {}

    // $ANTLR start "T__12"
    [GrammarRule("T__12")]
    private void mT__12()
    {
    	EnterRule_T__12();
    	EnterRule("T__12", 4);
    	TraceIn("T__12", 4);
    		try
    		{
    		int _type = T__12;
    		int _channel = DefaultTokenChannel;
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:12:7: ( '+' )
    		DebugEnterAlt(1);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:12:9: '+'
    		{
    		DebugLocation(12, 9);
    		Match('+'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__12", 4);
    		LeaveRule("T__12", 4);
    		LeaveRule_T__12();
        }
    }
    // $ANTLR end "T__12"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__13() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__13() {}

    // $ANTLR start "T__13"
    [GrammarRule("T__13")]
    private void mT__13()
    {
    	EnterRule_T__13();
    	EnterRule("T__13", 5);
    	TraceIn("T__13", 5);
    		try
    		{
    		int _type = T__13;
    		int _channel = DefaultTokenChannel;
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:13:7: ( '-' )
    		DebugEnterAlt(1);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:13:9: '-'
    		{
    		DebugLocation(13, 9);
    		Match('-'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__13", 5);
    		LeaveRule("T__13", 5);
    		LeaveRule_T__13();
        }
    }
    // $ANTLR end "T__13"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__14() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__14() {}

    // $ANTLR start "T__14"
    [GrammarRule("T__14")]
    private void mT__14()
    {
    	EnterRule_T__14();
    	EnterRule("T__14", 6);
    	TraceIn("T__14", 6);
    		try
    		{
    		int _type = T__14;
    		int _channel = DefaultTokenChannel;
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:14:7: ( '/' )
    		DebugEnterAlt(1);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:14:9: '/'
    		{
    		DebugLocation(14, 9);
    		Match('/'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__14", 6);
    		LeaveRule("T__14", 6);
    		LeaveRule_T__14();
        }
    }
    // $ANTLR end "T__14"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__15() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__15() {}

    // $ANTLR start "T__15"
    [GrammarRule("T__15")]
    private void mT__15()
    {
    	EnterRule_T__15();
    	EnterRule("T__15", 7);
    	TraceIn("T__15", 7);
    		try
    		{
    		int _type = T__15;
    		int _channel = DefaultTokenChannel;
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:15:7: ( '=' )
    		DebugEnterAlt(1);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:15:9: '='
    		{
    		DebugLocation(15, 9);
    		Match('='); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__15", 7);
    		LeaveRule("T__15", 7);
    		LeaveRule_T__15();
        }
    }
    // $ANTLR end "T__15"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ID() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ID() {}

    // $ANTLR start "ID"
    [GrammarRule("ID")]
    private void mID()
    {
    	EnterRule_ID();
    	EnterRule("ID", 8);
    	TraceIn("ID", 8);
    		try
    		{
    		int _type = ID;
    		int _channel = DefaultTokenChannel;
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:36:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
    		DebugEnterAlt(1);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:36:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    		{
    		DebugLocation(36, 7);
    		if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(36, 31);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:36:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    		try { DebugEnterSubRule(1);
    		while (true)
    		{
    			int alt1=2;
    			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    			int LA1_1 = input.LA(1);

    			if (((LA1_1>='0' && LA1_1<='9')||(LA1_1>='A' && LA1_1<='Z')||LA1_1=='_'||(LA1_1>='a' && LA1_1<='z')))
    			{
    				alt1 = 1;
    			}


    			} finally { DebugExitDecision(1); }
    			switch ( alt1 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:
    				{
    				DebugLocation(36, 31);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop1;
    			}
    		}

    		loop1:
    			;

    		} finally { DebugExitSubRule(1); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ID", 8);
    		LeaveRule("ID", 8);
    		LeaveRule_ID();
        }
    }
    // $ANTLR end "ID"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_INT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_INT() {}

    // $ANTLR start "INT"
    [GrammarRule("INT")]
    private void mINT()
    {
    	EnterRule_INT();
    	EnterRule("INT", 9);
    	TraceIn("INT", 9);
    		try
    		{
    		int _type = INT;
    		int _channel = DefaultTokenChannel;
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:39:5: ( ( '0' .. '9' )+ )
    		DebugEnterAlt(1);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:39:7: ( '0' .. '9' )+
    		{
    		DebugLocation(39, 7);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:39:7: ( '0' .. '9' )+
    		int cnt2=0;
    		try { DebugEnterSubRule(2);
    		while (true)
    		{
    			int alt2=2;
    			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    			int LA2_1 = input.LA(1);

    			if (((LA2_1>='0' && LA2_1<='9')))
    			{
    				alt2 = 1;
    			}


    			} finally { DebugExitDecision(2); }
    			switch (alt2)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:
    				{
    				DebugLocation(39, 7);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt2 >= 1)
    					goto loop2;

    				EarlyExitException eee2 = new EarlyExitException( 2, input );
    				DebugRecognitionException(eee2);
    				throw eee2;
    			}
    			cnt2++;
    		}
    		loop2:
    			;

    		} finally { DebugExitSubRule(2); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("INT", 9);
    		LeaveRule("INT", 9);
    		LeaveRule_INT();
        }
    }
    // $ANTLR end "INT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_FLOAT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_FLOAT() {}

    // $ANTLR start "FLOAT"
    [GrammarRule("FLOAT")]
    private void mFLOAT()
    {
    	EnterRule_FLOAT();
    	EnterRule("FLOAT", 10);
    	TraceIn("FLOAT", 10);
    		try
    		{
    		int _type = FLOAT;
    		int _channel = DefaultTokenChannel;
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:43:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT )
    		int alt9=3;
    		try { DebugEnterDecision(9, decisionCanBacktrack[9]);
    		try
    		{
    			alt9 = dfa9.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(9); }
    		switch (alt9)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:43:9: ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )?
    			{
    			DebugLocation(43, 9);
    			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:43:9: ( '0' .. '9' )+
    			int cnt3=0;
    			try { DebugEnterSubRule(3);
    			while (true)
    			{
    				int alt3=2;
    				try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    				int LA3_1 = input.LA(1);

    				if (((LA3_1>='0' && LA3_1<='9')))
    				{
    					alt3 = 1;
    				}


    				} finally { DebugExitDecision(3); }
    				switch (alt3)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:
    					{
    					DebugLocation(43, 9);
    					input.Consume();


    					}
    					break;

    				default:
    					if (cnt3 >= 1)
    						goto loop3;

    					EarlyExitException eee3 = new EarlyExitException( 3, input );
    					DebugRecognitionException(eee3);
    					throw eee3;
    				}
    				cnt3++;
    			}
    			loop3:
    				;

    			} finally { DebugExitSubRule(3); }

    			DebugLocation(43, 21);
    			Match('.'); 
    			DebugLocation(43, 25);
    			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:43:25: ( '0' .. '9' )*
    			try { DebugEnterSubRule(4);
    			while (true)
    			{
    				int alt4=2;
    				try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    				int LA4_1 = input.LA(1);

    				if (((LA4_1>='0' && LA4_1<='9')))
    				{
    					alt4 = 1;
    				}


    				} finally { DebugExitDecision(4); }
    				switch ( alt4 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:
    					{
    					DebugLocation(43, 25);
    					input.Consume();


    					}
    					break;

    				default:
    					goto loop4;
    				}
    			}

    			loop4:
    				;

    			} finally { DebugExitSubRule(4); }

    			DebugLocation(43, 37);
    			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:43:37: ( EXPONENT )?
    			int alt5=2;
    			try { DebugEnterSubRule(5);
    			try { DebugEnterDecision(5, decisionCanBacktrack[5]);
    			int LA5_1 = input.LA(1);

    			if ((LA5_1=='E'||LA5_1=='e'))
    			{
    				alt5 = 1;
    			}
    			} finally { DebugExitDecision(5); }
    			switch (alt5)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:43:37: EXPONENT
    				{
    				DebugLocation(43, 37);
    				mEXPONENT(); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(5); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:44:9: '.' ( '0' .. '9' )+ ( EXPONENT )?
    			{
    			DebugLocation(44, 9);
    			Match('.'); 
    			DebugLocation(44, 13);
    			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:44:13: ( '0' .. '9' )+
    			int cnt6=0;
    			try { DebugEnterSubRule(6);
    			while (true)
    			{
    				int alt6=2;
    				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
    				int LA6_1 = input.LA(1);

    				if (((LA6_1>='0' && LA6_1<='9')))
    				{
    					alt6 = 1;
    				}


    				} finally { DebugExitDecision(6); }
    				switch (alt6)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:
    					{
    					DebugLocation(44, 13);
    					input.Consume();


    					}
    					break;

    				default:
    					if (cnt6 >= 1)
    						goto loop6;

    					EarlyExitException eee6 = new EarlyExitException( 6, input );
    					DebugRecognitionException(eee6);
    					throw eee6;
    				}
    				cnt6++;
    			}
    			loop6:
    				;

    			} finally { DebugExitSubRule(6); }

    			DebugLocation(44, 25);
    			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:44:25: ( EXPONENT )?
    			int alt7=2;
    			try { DebugEnterSubRule(7);
    			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
    			int LA7_1 = input.LA(1);

    			if ((LA7_1=='E'||LA7_1=='e'))
    			{
    				alt7 = 1;
    			}
    			} finally { DebugExitDecision(7); }
    			switch (alt7)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:44:25: EXPONENT
    				{
    				DebugLocation(44, 25);
    				mEXPONENT(); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(7); }


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:45:9: ( '0' .. '9' )+ EXPONENT
    			{
    			DebugLocation(45, 9);
    			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:45:9: ( '0' .. '9' )+
    			int cnt8=0;
    			try { DebugEnterSubRule(8);
    			while (true)
    			{
    				int alt8=2;
    				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
    				int LA8_1 = input.LA(1);

    				if (((LA8_1>='0' && LA8_1<='9')))
    				{
    					alt8 = 1;
    				}


    				} finally { DebugExitDecision(8); }
    				switch (alt8)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:
    					{
    					DebugLocation(45, 9);
    					input.Consume();


    					}
    					break;

    				default:
    					if (cnt8 >= 1)
    						goto loop8;

    					EarlyExitException eee8 = new EarlyExitException( 8, input );
    					DebugRecognitionException(eee8);
    					throw eee8;
    				}
    				cnt8++;
    			}
    			loop8:
    				;

    			} finally { DebugExitSubRule(8); }

    			DebugLocation(45, 21);
    			mEXPONENT(); 

    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("FLOAT", 10);
    		LeaveRule("FLOAT", 10);
    		LeaveRule_FLOAT();
        }
    }
    // $ANTLR end "FLOAT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_EXPONENT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_EXPONENT() {}

    // $ANTLR start "EXPONENT"
    [GrammarRule("EXPONENT")]
    private void mEXPONENT()
    {
    	EnterRule_EXPONENT();
    	EnterRule("EXPONENT", 11);
    	TraceIn("EXPONENT", 11);
    		try
    		{
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:50:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
    		DebugEnterAlt(1);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:50:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
    		{
    		DebugLocation(50, 12);
    		if (input.LA(1)=='E'||input.LA(1)=='e')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(50, 22);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:50:22: ( '+' | '-' )?
    		int alt10=2;
    		try { DebugEnterSubRule(10);
    		try { DebugEnterDecision(10, decisionCanBacktrack[10]);
    		int LA10_1 = input.LA(1);

    		if ((LA10_1=='+'||LA10_1=='-'))
    		{
    			alt10 = 1;
    		}
    		} finally { DebugExitDecision(10); }
    		switch (alt10)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:
    			{
    			DebugLocation(50, 22);
    			input.Consume();


    			}
    			break;

    		}
    		} finally { DebugExitSubRule(10); }

    		DebugLocation(50, 33);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:50:33: ( '0' .. '9' )+
    		int cnt11=0;
    		try { DebugEnterSubRule(11);
    		while (true)
    		{
    			int alt11=2;
    			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
    			int LA11_1 = input.LA(1);

    			if (((LA11_1>='0' && LA11_1<='9')))
    			{
    				alt11 = 1;
    			}


    			} finally { DebugExitDecision(11); }
    			switch (alt11)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:
    				{
    				DebugLocation(50, 33);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt11 >= 1)
    					goto loop11;

    				EarlyExitException eee11 = new EarlyExitException( 11, input );
    				DebugRecognitionException(eee11);
    				throw eee11;
    			}
    			cnt11++;
    		}
    		loop11:
    			;

    		} finally { DebugExitSubRule(11); }


    		}

    	}
    	finally
    	{
    		TraceOut("EXPONENT", 11);
    		LeaveRule("EXPONENT", 11);
    		LeaveRule_EXPONENT();
        }
    }
    // $ANTLR end "EXPONENT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NEWLINE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NEWLINE() {}

    // $ANTLR start "NEWLINE"
    [GrammarRule("NEWLINE")]
    private void mNEWLINE()
    {
    	EnterRule_NEWLINE();
    	EnterRule("NEWLINE", 12);
    	TraceIn("NEWLINE", 12);
    		try
    		{
    		int _type = NEWLINE;
    		int _channel = DefaultTokenChannel;
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:51:9: ( ( '\\r' )? '\\n' )
    		DebugEnterAlt(1);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:51:11: ( '\\r' )? '\\n'
    		{
    		DebugLocation(51, 11);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:51:11: ( '\\r' )?
    		int alt12=2;
    		try { DebugEnterSubRule(12);
    		try { DebugEnterDecision(12, decisionCanBacktrack[12]);
    		int LA12_1 = input.LA(1);

    		if ((LA12_1=='\r'))
    		{
    			alt12 = 1;
    		}
    		} finally { DebugExitDecision(12); }
    		switch (alt12)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:51:11: '\\r'
    			{
    			DebugLocation(51, 11);
    			Match('\r'); 

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(12); }

    		DebugLocation(51, 17);
    		Match('\n'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NEWLINE", 12);
    		LeaveRule("NEWLINE", 12);
    		LeaveRule_NEWLINE();
        }
    }
    // $ANTLR end "NEWLINE"

    public override void mTokens()
    {
    	// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:1:8: ( T__9 | T__10 | T__11 | T__12 | T__13 | T__14 | T__15 | ID | INT | FLOAT | NEWLINE )
    	int alt13=11;
    	try { DebugEnterDecision(13, decisionCanBacktrack[13]);
    	try
    	{
    		alt13 = dfa13.Predict(input);
    	}
    	catch (NoViableAltException nvae)
    	{
    		DebugRecognitionException(nvae);
    		throw;
    	}
    	} finally { DebugExitDecision(13); }
    	switch (alt13)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:1:10: T__9
    		{
    		DebugLocation(1, 10);
    		mT__9(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:1:15: T__10
    		{
    		DebugLocation(1, 15);
    		mT__10(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:1:21: T__11
    		{
    		DebugLocation(1, 21);
    		mT__11(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:1:27: T__12
    		{
    		DebugLocation(1, 27);
    		mT__12(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:1:33: T__13
    		{
    		DebugLocation(1, 33);
    		mT__13(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:1:39: T__14
    		{
    		DebugLocation(1, 39);
    		mT__14(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:1:45: T__15
    		{
    		DebugLocation(1, 45);
    		mT__15(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:1:51: ID
    		{
    		DebugLocation(1, 51);
    		mID(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:1:54: INT
    		{
    		DebugLocation(1, 54);
    		mINT(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:1:58: FLOAT
    		{
    		DebugLocation(1, 58);
    		mFLOAT(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:1:64: NEWLINE
    		{
    		DebugLocation(1, 64);
    		mNEWLINE(); 

    		}
    		break;

    	}

    }


	#region DFA
	DFA9 dfa9;
	DFA13 dfa13;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa9 = new DFA9(this);
		dfa13 = new DFA13(this);
	}

	private class DFA9 : DFA
	{
		private const string DFA9_eotS =
			"\x5\xFFFF";
		private const string DFA9_eofS =
			"\x5\xFFFF";
		private const string DFA9_minS =
			"\x2\x2E\x3\xFFFF";
		private const string DFA9_maxS =
			"\x1\x39\x1\x65\x3\xFFFF";
		private const string DFA9_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\x3";
		private const string DFA9_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA9_transitionS =
			{
				"\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x3\x1\xFFFF\xA\x1\xB\xFFFF\x1\x4\x1F\xFFFF\x1\x4",
				"",
				"",
				""
			};

		private static readonly short[] DFA9_eot = DFA.UnpackEncodedString(DFA9_eotS);
		private static readonly short[] DFA9_eof = DFA.UnpackEncodedString(DFA9_eofS);
		private static readonly char[] DFA9_min = DFA.UnpackEncodedStringToUnsignedChars(DFA9_minS);
		private static readonly char[] DFA9_max = DFA.UnpackEncodedStringToUnsignedChars(DFA9_maxS);
		private static readonly short[] DFA9_accept = DFA.UnpackEncodedString(DFA9_acceptS);
		private static readonly short[] DFA9_special = DFA.UnpackEncodedString(DFA9_specialS);
		private static readonly short[][] DFA9_transition;

		static DFA9()
		{
			int numStates = DFA9_transitionS.Length;
			DFA9_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA9_transition[i] = DFA.UnpackEncodedString(DFA9_transitionS[i]);
			}
		}

		public DFA9( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 9;
			this.eot = DFA9_eot;
			this.eof = DFA9_eof;
			this.min = DFA9_min;
			this.max = DFA9_max;
			this.accept = DFA9_accept;
			this.special = DFA9_special;
			this.transition = DFA9_transition;
		}

		public override string Description { get { return "42:1: FLOAT : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA13 : DFA
	{
		private const string DFA13_eotS =
			"\x9\xFFFF\x1\xC\x3\xFFFF";
		private const string DFA13_eofS =
			"\xD\xFFFF";
		private const string DFA13_minS =
			"\x1\xA\x8\xFFFF\x1\x2E\x3\xFFFF";
		private const string DFA13_maxS =
			"\x1\x7A\x8\xFFFF\x1\x65\x3\xFFFF";
		private const string DFA13_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\xFFFF\x1"+
			"\xA\x1\xB\x1\x9";
		private const string DFA13_specialS =
			"\xD\xFFFF}>";
		private static readonly string[] DFA13_transitionS =
			{
				"\x1\xB\x2\xFFFF\x1\xB\x1A\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\xFFFF\x1"+
				"\x5\x1\xA\x1\x6\xA\x9\x3\xFFFF\x1\x7\x3\xFFFF\x1A\x8\x4\xFFFF\x1\x8"+
				"\x1\xFFFF\x1A\x8",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xA\x1\xFFFF\xA\x9\xB\xFFFF\x1\xA\x1F\xFFFF\x1\xA",
				"",
				"",
				""
			};

		private static readonly short[] DFA13_eot = DFA.UnpackEncodedString(DFA13_eotS);
		private static readonly short[] DFA13_eof = DFA.UnpackEncodedString(DFA13_eofS);
		private static readonly char[] DFA13_min = DFA.UnpackEncodedStringToUnsignedChars(DFA13_minS);
		private static readonly char[] DFA13_max = DFA.UnpackEncodedStringToUnsignedChars(DFA13_maxS);
		private static readonly short[] DFA13_accept = DFA.UnpackEncodedString(DFA13_acceptS);
		private static readonly short[] DFA13_special = DFA.UnpackEncodedString(DFA13_specialS);
		private static readonly short[][] DFA13_transition;

		static DFA13()
		{
			int numStates = DFA13_transitionS.Length;
			DFA13_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA13_transition[i] = DFA.UnpackEncodedString(DFA13_transitionS[i]);
			}
		}

		public DFA13( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 13;
			this.eot = DFA13_eot;
			this.eof = DFA13_eof;
			this.min = DFA13_min;
			this.max = DFA13_max;
			this.accept = DFA13_accept;
			this.special = DFA13_special;
			this.transition = DFA13_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__9 | T__10 | T__11 | T__12 | T__13 | T__14 | T__15 | ID | INT | FLOAT | NEWLINE );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace  Generated 
