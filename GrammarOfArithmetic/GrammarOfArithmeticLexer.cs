//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g 2016-12-06 11:36:12

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace  Generated 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class GrammarOfArithmeticLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int ACOS=4;
	public const int ACTG=5;
	public const int ARC=6;
	public const int ASIN=7;
	public const int ATG=8;
	public const int COS=9;
	public const int COSH=10;
	public const int CTG=11;
	public const int CTGH=12;
	public const int EXP=13;
	public const int EXPONENT=14;
	public const int FLOAT=15;
	public const int LN=16;
	public const int LOG=17;
	public const int NEWLINE=18;
	public const int Pi=19;
	public const int SEPARATOR=20;
	public const int SIN=21;
	public const int SINH=22;
	public const int TG=23;
	public const int TGH=24;

    // delegates
    // delegators

	public GrammarOfArithmeticLexer()
	{
		OnCreated();
	}

	public GrammarOfArithmeticLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public GrammarOfArithmeticLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__25() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__25() {}

    // $ANTLR start "T__25"
    [GrammarRule("T__25")]
    private void mT__25()
    {
    	EnterRule_T__25();
    	EnterRule("T__25", 1);
    	TraceIn("T__25", 1);
    		try
    		{
    		int _type = T__25;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:9:7: ( '(' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:9:9: '('
    		{
    		DebugLocation(9, 9);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__25", 1);
    		LeaveRule("T__25", 1);
    		LeaveRule_T__25();
        }
    }
    // $ANTLR end "T__25"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__26() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__26() {}

    // $ANTLR start "T__26"
    [GrammarRule("T__26")]
    private void mT__26()
    {
    	EnterRule_T__26();
    	EnterRule("T__26", 2);
    	TraceIn("T__26", 2);
    		try
    		{
    		int _type = T__26;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:10:7: ( ')' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:10:9: ')'
    		{
    		DebugLocation(10, 9);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__26", 2);
    		LeaveRule("T__26", 2);
    		LeaveRule_T__26();
        }
    }
    // $ANTLR end "T__26"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__27() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__27() {}

    // $ANTLR start "T__27"
    [GrammarRule("T__27")]
    private void mT__27()
    {
    	EnterRule_T__27();
    	EnterRule("T__27", 3);
    	TraceIn("T__27", 3);
    		try
    		{
    		int _type = T__27;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:11:7: ( '*' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:11:9: '*'
    		{
    		DebugLocation(11, 9);
    		Match('*'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__27", 3);
    		LeaveRule("T__27", 3);
    		LeaveRule_T__27();
        }
    }
    // $ANTLR end "T__27"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__28() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__28() {}

    // $ANTLR start "T__28"
    [GrammarRule("T__28")]
    private void mT__28()
    {
    	EnterRule_T__28();
    	EnterRule("T__28", 4);
    	TraceIn("T__28", 4);
    		try
    		{
    		int _type = T__28;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:12:7: ( '+' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:12:9: '+'
    		{
    		DebugLocation(12, 9);
    		Match('+'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__28", 4);
    		LeaveRule("T__28", 4);
    		LeaveRule_T__28();
        }
    }
    // $ANTLR end "T__28"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__29() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__29() {}

    // $ANTLR start "T__29"
    [GrammarRule("T__29")]
    private void mT__29()
    {
    	EnterRule_T__29();
    	EnterRule("T__29", 5);
    	TraceIn("T__29", 5);
    		try
    		{
    		int _type = T__29;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:13:7: ( '-' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:13:9: '-'
    		{
    		DebugLocation(13, 9);
    		Match('-'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__29", 5);
    		LeaveRule("T__29", 5);
    		LeaveRule_T__29();
        }
    }
    // $ANTLR end "T__29"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__30() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__30() {}

    // $ANTLR start "T__30"
    [GrammarRule("T__30")]
    private void mT__30()
    {
    	EnterRule_T__30();
    	EnterRule("T__30", 6);
    	TraceIn("T__30", 6);
    		try
    		{
    		int _type = T__30;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:14:7: ( '/' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:14:9: '/'
    		{
    		DebugLocation(14, 9);
    		Match('/'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__30", 6);
    		LeaveRule("T__30", 6);
    		LeaveRule_T__30();
        }
    }
    // $ANTLR end "T__30"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_FLOAT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_FLOAT() {}

    // $ANTLR start "FLOAT"
    [GrammarRule("FLOAT")]
    private void mFLOAT()
    {
    	EnterRule_FLOAT();
    	EnterRule("FLOAT", 7);
    	TraceIn("FLOAT", 7);
    		try
    		{
    		int _type = FLOAT;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:165:5: ( ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ SEPARATOR ( '0' .. '9' )* ( EXPONENT )? | SEPARATOR ( '0' .. '9' )+ ( EXPONENT )? )
    		int alt8=3;
    		try { DebugEnterDecision(8, decisionCanBacktrack[8]);
    		try
    		{
    			alt8 = dfa8.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(8); }
    		switch (alt8)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:165:7: ( '0' .. '9' )+ ( EXPONENT )?
    			{
    			DebugLocation(165, 7);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:165:7: ( '0' .. '9' )+
    			int cnt1=0;
    			try { DebugEnterSubRule(1);
    			while (true)
    			{
    				int alt1=2;
    				try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    				int LA1_1 = input.LA(1);

    				if (((LA1_1>='0' && LA1_1<='9')))
    				{
    					alt1 = 1;
    				}


    				} finally { DebugExitDecision(1); }
    				switch (alt1)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:
    					{
    					DebugLocation(165, 7);
    					input.Consume();


    					}
    					break;

    				default:
    					if (cnt1 >= 1)
    						goto loop1;

    					EarlyExitException eee1 = new EarlyExitException( 1, input );
    					DebugRecognitionException(eee1);
    					throw eee1;
    				}
    				cnt1++;
    			}
    			loop1:
    				;

    			} finally { DebugExitSubRule(1); }

    			DebugLocation(165, 19);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:165:19: ( EXPONENT )?
    			int alt2=2;
    			try { DebugEnterSubRule(2);
    			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    			int LA2_1 = input.LA(1);

    			if ((LA2_1=='E'||LA2_1=='e'))
    			{
    				alt2 = 1;
    			}
    			} finally { DebugExitDecision(2); }
    			switch (alt2)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:165:19: EXPONENT
    				{
    				DebugLocation(165, 19);
    				mEXPONENT(); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(2); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:166:9: ( '0' .. '9' )+ SEPARATOR ( '0' .. '9' )* ( EXPONENT )?
    			{
    			DebugLocation(166, 9);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:166:9: ( '0' .. '9' )+
    			int cnt3=0;
    			try { DebugEnterSubRule(3);
    			while (true)
    			{
    				int alt3=2;
    				try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    				int LA3_1 = input.LA(1);

    				if (((LA3_1>='0' && LA3_1<='9')))
    				{
    					alt3 = 1;
    				}


    				} finally { DebugExitDecision(3); }
    				switch (alt3)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:
    					{
    					DebugLocation(166, 9);
    					input.Consume();


    					}
    					break;

    				default:
    					if (cnt3 >= 1)
    						goto loop3;

    					EarlyExitException eee3 = new EarlyExitException( 3, input );
    					DebugRecognitionException(eee3);
    					throw eee3;
    				}
    				cnt3++;
    			}
    			loop3:
    				;

    			} finally { DebugExitSubRule(3); }

    			DebugLocation(166, 21);
    			mSEPARATOR(); 
    			DebugLocation(166, 31);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:166:31: ( '0' .. '9' )*
    			try { DebugEnterSubRule(4);
    			while (true)
    			{
    				int alt4=2;
    				try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    				int LA4_1 = input.LA(1);

    				if (((LA4_1>='0' && LA4_1<='9')))
    				{
    					alt4 = 1;
    				}


    				} finally { DebugExitDecision(4); }
    				switch ( alt4 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:
    					{
    					DebugLocation(166, 31);
    					input.Consume();


    					}
    					break;

    				default:
    					goto loop4;
    				}
    			}

    			loop4:
    				;

    			} finally { DebugExitSubRule(4); }

    			DebugLocation(166, 43);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:166:43: ( EXPONENT )?
    			int alt5=2;
    			try { DebugEnterSubRule(5);
    			try { DebugEnterDecision(5, decisionCanBacktrack[5]);
    			int LA5_1 = input.LA(1);

    			if ((LA5_1=='E'||LA5_1=='e'))
    			{
    				alt5 = 1;
    			}
    			} finally { DebugExitDecision(5); }
    			switch (alt5)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:166:43: EXPONENT
    				{
    				DebugLocation(166, 43);
    				mEXPONENT(); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(5); }


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:167:9: SEPARATOR ( '0' .. '9' )+ ( EXPONENT )?
    			{
    			DebugLocation(167, 9);
    			mSEPARATOR(); 
    			DebugLocation(167, 19);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:167:19: ( '0' .. '9' )+
    			int cnt6=0;
    			try { DebugEnterSubRule(6);
    			while (true)
    			{
    				int alt6=2;
    				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
    				int LA6_1 = input.LA(1);

    				if (((LA6_1>='0' && LA6_1<='9')))
    				{
    					alt6 = 1;
    				}


    				} finally { DebugExitDecision(6); }
    				switch (alt6)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:
    					{
    					DebugLocation(167, 19);
    					input.Consume();


    					}
    					break;

    				default:
    					if (cnt6 >= 1)
    						goto loop6;

    					EarlyExitException eee6 = new EarlyExitException( 6, input );
    					DebugRecognitionException(eee6);
    					throw eee6;
    				}
    				cnt6++;
    			}
    			loop6:
    				;

    			} finally { DebugExitSubRule(6); }

    			DebugLocation(167, 31);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:167:31: ( EXPONENT )?
    			int alt7=2;
    			try { DebugEnterSubRule(7);
    			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
    			int LA7_1 = input.LA(1);

    			if ((LA7_1=='E'||LA7_1=='e'))
    			{
    				alt7 = 1;
    			}
    			} finally { DebugExitDecision(7); }
    			switch (alt7)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:167:31: EXPONENT
    				{
    				DebugLocation(167, 31);
    				mEXPONENT(); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(7); }


    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("FLOAT", 7);
    		LeaveRule("FLOAT", 7);
    		LeaveRule_FLOAT();
        }
    }
    // $ANTLR end "FLOAT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_SEPARATOR() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_SEPARATOR() {}

    // $ANTLR start "SEPARATOR"
    [GrammarRule("SEPARATOR")]
    private void mSEPARATOR()
    {
    	EnterRule_SEPARATOR();
    	EnterRule("SEPARATOR", 8);
    	TraceIn("SEPARATOR", 8);
    		try
    		{
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:172:11: ( ( '.' | ',' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:
    		{
    		DebugLocation(172, 11);
    		if (input.LA(1)==','||input.LA(1)=='.')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("SEPARATOR", 8);
    		LeaveRule("SEPARATOR", 8);
    		LeaveRule_SEPARATOR();
        }
    }
    // $ANTLR end "SEPARATOR"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_EXPONENT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_EXPONENT() {}

    // $ANTLR start "EXPONENT"
    [GrammarRule("EXPONENT")]
    private void mEXPONENT()
    {
    	EnterRule_EXPONENT();
    	EnterRule("EXPONENT", 9);
    	TraceIn("EXPONENT", 9);
    		try
    		{
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:174:9: ( EXP ( '+' | '-' )? ( '0' .. '9' )+ )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:174:11: EXP ( '+' | '-' )? ( '0' .. '9' )+
    		{
    		DebugLocation(174, 11);
    		mEXP(); 
    		DebugLocation(174, 15);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:174:15: ( '+' | '-' )?
    		int alt9=2;
    		try { DebugEnterSubRule(9);
    		try { DebugEnterDecision(9, decisionCanBacktrack[9]);
    		int LA9_1 = input.LA(1);

    		if ((LA9_1=='+'||LA9_1=='-'))
    		{
    			alt9 = 1;
    		}
    		} finally { DebugExitDecision(9); }
    		switch (alt9)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:
    			{
    			DebugLocation(174, 15);
    			input.Consume();


    			}
    			break;

    		}
    		} finally { DebugExitSubRule(9); }

    		DebugLocation(174, 26);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:174:26: ( '0' .. '9' )+
    		int cnt10=0;
    		try { DebugEnterSubRule(10);
    		while (true)
    		{
    			int alt10=2;
    			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
    			int LA10_1 = input.LA(1);

    			if (((LA10_1>='0' && LA10_1<='9')))
    			{
    				alt10 = 1;
    			}


    			} finally { DebugExitDecision(10); }
    			switch (alt10)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:
    				{
    				DebugLocation(174, 26);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt10 >= 1)
    					goto loop10;

    				EarlyExitException eee10 = new EarlyExitException( 10, input );
    				DebugRecognitionException(eee10);
    				throw eee10;
    			}
    			cnt10++;
    		}
    		loop10:
    			;

    		} finally { DebugExitSubRule(10); }


    		}

    	}
    	finally
    	{
    		TraceOut("EXPONENT", 9);
    		LeaveRule("EXPONENT", 9);
    		LeaveRule_EXPONENT();
        }
    }
    // $ANTLR end "EXPONENT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_EXP() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_EXP() {}

    // $ANTLR start "EXP"
    [GrammarRule("EXP")]
    private void mEXP()
    {
    	EnterRule_EXP();
    	EnterRule("EXP", 10);
    	TraceIn("EXP", 10);
    		try
    		{
    		int _type = EXP;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:174:6: ( ( 'e' | 'E' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:
    		{
    		DebugLocation(174, 6);
    		if (input.LA(1)=='E'||input.LA(1)=='e')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("EXP", 10);
    		LeaveRule("EXP", 10);
    		LeaveRule_EXP();
        }
    }
    // $ANTLR end "EXP"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_LOG() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_LOG() {}

    // $ANTLR start "LOG"
    [GrammarRule("LOG")]
    private void mLOG()
    {
    	EnterRule_LOG();
    	EnterRule("LOG", 11);
    	TraceIn("LOG", 11);
    		try
    		{
    		int _type = LOG;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:175:5: ( ( 'L' | 'l' ) 'og' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:175:7: ( 'L' | 'l' ) 'og'
    		{
    		DebugLocation(175, 7);
    		if (input.LA(1)=='L'||input.LA(1)=='l')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(175, 18);
    		Match("og"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("LOG", 11);
    		LeaveRule("LOG", 11);
    		LeaveRule_LOG();
        }
    }
    // $ANTLR end "LOG"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_LN() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_LN() {}

    // $ANTLR start "LN"
    [GrammarRule("LN")]
    private void mLN()
    {
    	EnterRule_LN();
    	EnterRule("LN", 12);
    	TraceIn("LN", 12);
    		try
    		{
    		int _type = LN;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:176:4: ( ( 'L' | 'l' ) 'n' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:176:6: ( 'L' | 'l' ) 'n'
    		{
    		DebugLocation(176, 6);
    		if (input.LA(1)=='L'||input.LA(1)=='l')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(176, 17);
    		Match('n'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("LN", 12);
    		LeaveRule("LN", 12);
    		LeaveRule_LN();
        }
    }
    // $ANTLR end "LN"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_Pi() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_Pi() {}

    // $ANTLR start "Pi"
    [GrammarRule("Pi")]
    private void mPi()
    {
    	EnterRule_Pi();
    	EnterRule("Pi", 13);
    	TraceIn("Pi", 13);
    		try
    		{
    		int _type = Pi;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:178:5: ( 'Pi' | 'PI' | 'pi' )
    		int alt11=3;
    		try { DebugEnterDecision(11, decisionCanBacktrack[11]);
    		int LA11_1 = input.LA(1);

    		if ((LA11_1=='P'))
    		{
    			int LA11_2 = input.LA(2);

    			if ((LA11_2=='i'))
    			{
    				alt11 = 1;
    			}
    			else if ((LA11_2=='I'))
    			{
    				alt11 = 2;
    			}

    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 11, 1, input, 2);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}

    		}
    		else if ((LA11_1=='p'))
    		{
    			alt11 = 3;
    		}

    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}

    		} finally { DebugExitDecision(11); }
    		switch (alt11)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:178:7: 'Pi'
    			{
    			DebugLocation(178, 7);
    			Match("Pi"); 


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:178:14: 'PI'
    			{
    			DebugLocation(178, 14);
    			Match("PI"); 


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:178:20: 'pi'
    			{
    			DebugLocation(178, 20);
    			Match("pi"); 


    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("Pi", 13);
    		LeaveRule("Pi", 13);
    		LeaveRule_Pi();
        }
    }
    // $ANTLR end "Pi"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_SIN() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_SIN() {}

    // $ANTLR start "SIN"
    [GrammarRule("SIN")]
    private void mSIN()
    {
    	EnterRule_SIN();
    	EnterRule("SIN", 14);
    	TraceIn("SIN", 14);
    		try
    		{
    		int _type = SIN;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:179:6: ( ( 'S' | 's' ) 'in' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:179:8: ( 'S' | 's' ) 'in'
    		{
    		DebugLocation(179, 8);
    		if (input.LA(1)=='S'||input.LA(1)=='s')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(179, 18);
    		Match("in"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("SIN", 14);
    		LeaveRule("SIN", 14);
    		LeaveRule_SIN();
        }
    }
    // $ANTLR end "SIN"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_COS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_COS() {}

    // $ANTLR start "COS"
    [GrammarRule("COS")]
    private void mCOS()
    {
    	EnterRule_COS();
    	EnterRule("COS", 15);
    	TraceIn("COS", 15);
    		try
    		{
    		int _type = COS;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:180:6: ( ( 'C' | 'c' ) 'os' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:180:8: ( 'C' | 'c' ) 'os'
    		{
    		DebugLocation(180, 8);
    		if (input.LA(1)=='C'||input.LA(1)=='c')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(180, 18);
    		Match("os"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("COS", 15);
    		LeaveRule("COS", 15);
    		LeaveRule_COS();
        }
    }
    // $ANTLR end "COS"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_TG() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_TG() {}

    // $ANTLR start "TG"
    [GrammarRule("TG")]
    private void mTG()
    {
    	EnterRule_TG();
    	EnterRule("TG", 16);
    	TraceIn("TG", 16);
    		try
    		{
    		int _type = TG;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:181:5: ( ( 'T' | 't' ) 'g' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:181:7: ( 'T' | 't' ) 'g'
    		{
    		DebugLocation(181, 7);
    		if (input.LA(1)=='T'||input.LA(1)=='t')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(181, 17);
    		Match('g'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("TG", 16);
    		LeaveRule("TG", 16);
    		LeaveRule_TG();
        }
    }
    // $ANTLR end "TG"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_CTG() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_CTG() {}

    // $ANTLR start "CTG"
    [GrammarRule("CTG")]
    private void mCTG()
    {
    	EnterRule_CTG();
    	EnterRule("CTG", 17);
    	TraceIn("CTG", 17);
    		try
    		{
    		int _type = CTG;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:182:6: ( ( 'C' | 'c' ) 'tg' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:182:8: ( 'C' | 'c' ) 'tg'
    		{
    		DebugLocation(182, 8);
    		if (input.LA(1)=='C'||input.LA(1)=='c')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(182, 18);
    		Match("tg"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("CTG", 17);
    		LeaveRule("CTG", 17);
    		LeaveRule_CTG();
        }
    }
    // $ANTLR end "CTG"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_SINH() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_SINH() {}

    // $ANTLR start "SINH"
    [GrammarRule("SINH")]
    private void mSINH()
    {
    	EnterRule_SINH();
    	EnterRule("SINH", 18);
    	TraceIn("SINH", 18);
    		try
    		{
    		int _type = SINH;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:184:7: ( SIN 'h' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:184:9: SIN 'h'
    		{
    		DebugLocation(184, 9);
    		mSIN(); 
    		DebugLocation(184, 13);
    		Match('h'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("SINH", 18);
    		LeaveRule("SINH", 18);
    		LeaveRule_SINH();
        }
    }
    // $ANTLR end "SINH"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_COSH() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_COSH() {}

    // $ANTLR start "COSH"
    [GrammarRule("COSH")]
    private void mCOSH()
    {
    	EnterRule_COSH();
    	EnterRule("COSH", 19);
    	TraceIn("COSH", 19);
    		try
    		{
    		int _type = COSH;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:185:7: ( COS 'h' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:185:9: COS 'h'
    		{
    		DebugLocation(185, 9);
    		mCOS(); 
    		DebugLocation(185, 13);
    		Match('h'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("COSH", 19);
    		LeaveRule("COSH", 19);
    		LeaveRule_COSH();
        }
    }
    // $ANTLR end "COSH"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_TGH() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_TGH() {}

    // $ANTLR start "TGH"
    [GrammarRule("TGH")]
    private void mTGH()
    {
    	EnterRule_TGH();
    	EnterRule("TGH", 20);
    	TraceIn("TGH", 20);
    		try
    		{
    		int _type = TGH;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:186:6: ( TG 'h' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:186:8: TG 'h'
    		{
    		DebugLocation(186, 8);
    		mTG(); 
    		DebugLocation(186, 11);
    		Match('h'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("TGH", 20);
    		LeaveRule("TGH", 20);
    		LeaveRule_TGH();
        }
    }
    // $ANTLR end "TGH"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_CTGH() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_CTGH() {}

    // $ANTLR start "CTGH"
    [GrammarRule("CTGH")]
    private void mCTGH()
    {
    	EnterRule_CTGH();
    	EnterRule("CTGH", 21);
    	TraceIn("CTGH", 21);
    		try
    		{
    		int _type = CTGH;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:187:7: ( CTG 'h' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:187:9: CTG 'h'
    		{
    		DebugLocation(187, 9);
    		mCTG(); 
    		DebugLocation(187, 13);
    		Match('h'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("CTGH", 21);
    		LeaveRule("CTGH", 21);
    		LeaveRule_CTGH();
        }
    }
    // $ANTLR end "CTGH"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ARC() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ARC() {}

    // $ANTLR start "ARC"
    [GrammarRule("ARC")]
    private void mARC()
    {
    	EnterRule_ARC();
    	EnterRule("ARC", 22);
    	TraceIn("ARC", 22);
    		try
    		{
    		int _type = ARC;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:189:6: ( ( 'Arc' | 'arc' | 'A' | 'a' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:189:8: ( 'Arc' | 'arc' | 'A' | 'a' )
    		{
    		DebugLocation(189, 8);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:189:8: ( 'Arc' | 'arc' | 'A' | 'a' )
    		int alt12=4;
    		try { DebugEnterSubRule(12);
    		try { DebugEnterDecision(12, decisionCanBacktrack[12]);
    		int LA12_1 = input.LA(1);

    		if ((LA12_1=='A'))
    		{
    			int LA12_2 = input.LA(2);

    			if ((LA12_2=='r'))
    			{
    				alt12 = 1;
    			}

    			else
    			{
    				alt12 = 3;
    			}

    		}
    		else if ((LA12_1=='a'))
    		{
    			int LA12_2 = input.LA(2);

    			if ((LA12_2=='r'))
    			{
    				alt12 = 2;
    			}

    			else
    			{
    				alt12 = 4;
    			}

    		}

    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}

    		} finally { DebugExitDecision(12); }
    		switch (alt12)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:189:9: 'Arc'
    			{
    			DebugLocation(189, 9);
    			Match("Arc"); 


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:189:16: 'arc'
    			{
    			DebugLocation(189, 16);
    			Match("arc"); 


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:189:23: 'A'
    			{
    			DebugLocation(189, 23);
    			Match('A'); 

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:189:29: 'a'
    			{
    			DebugLocation(189, 29);
    			Match('a'); 

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(12); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ARC", 22);
    		LeaveRule("ARC", 22);
    		LeaveRule_ARC();
        }
    }
    // $ANTLR end "ARC"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ASIN() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ASIN() {}

    // $ANTLR start "ASIN"
    [GrammarRule("ASIN")]
    private void mASIN()
    {
    	EnterRule_ASIN();
    	EnterRule("ASIN", 23);
    	TraceIn("ASIN", 23);
    		try
    		{
    		int _type = ASIN;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:190:7: ( ARC SIN )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:190:9: ARC SIN
    		{
    		DebugLocation(190, 9);
    		mARC(); 
    		DebugLocation(190, 13);
    		mSIN(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ASIN", 23);
    		LeaveRule("ASIN", 23);
    		LeaveRule_ASIN();
        }
    }
    // $ANTLR end "ASIN"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ACOS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ACOS() {}

    // $ANTLR start "ACOS"
    [GrammarRule("ACOS")]
    private void mACOS()
    {
    	EnterRule_ACOS();
    	EnterRule("ACOS", 24);
    	TraceIn("ACOS", 24);
    		try
    		{
    		int _type = ACOS;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:191:7: ( ARC COS )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:191:9: ARC COS
    		{
    		DebugLocation(191, 9);
    		mARC(); 
    		DebugLocation(191, 13);
    		mCOS(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ACOS", 24);
    		LeaveRule("ACOS", 24);
    		LeaveRule_ACOS();
        }
    }
    // $ANTLR end "ACOS"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ATG() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ATG() {}

    // $ANTLR start "ATG"
    [GrammarRule("ATG")]
    private void mATG()
    {
    	EnterRule_ATG();
    	EnterRule("ATG", 25);
    	TraceIn("ATG", 25);
    		try
    		{
    		int _type = ATG;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:192:6: ( ARC TG )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:192:8: ARC TG
    		{
    		DebugLocation(192, 8);
    		mARC(); 
    		DebugLocation(192, 12);
    		mTG(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ATG", 25);
    		LeaveRule("ATG", 25);
    		LeaveRule_ATG();
        }
    }
    // $ANTLR end "ATG"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ACTG() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ACTG() {}

    // $ANTLR start "ACTG"
    [GrammarRule("ACTG")]
    private void mACTG()
    {
    	EnterRule_ACTG();
    	EnterRule("ACTG", 26);
    	TraceIn("ACTG", 26);
    		try
    		{
    		int _type = ACTG;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:193:7: ( ARC CTG )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:193:9: ARC CTG
    		{
    		DebugLocation(193, 9);
    		mARC(); 
    		DebugLocation(193, 13);
    		mCTG(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ACTG", 26);
    		LeaveRule("ACTG", 26);
    		LeaveRule_ACTG();
        }
    }
    // $ANTLR end "ACTG"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NEWLINE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NEWLINE() {}

    // $ANTLR start "NEWLINE"
    [GrammarRule("NEWLINE")]
    private void mNEWLINE()
    {
    	EnterRule_NEWLINE();
    	EnterRule("NEWLINE", 27);
    	TraceIn("NEWLINE", 27);
    		try
    		{
    		int _type = NEWLINE;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:195:9: ( '\\n' ( '\\r' )? )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:195:11: '\\n' ( '\\r' )?
    		{
    		DebugLocation(195, 11);
    		Match('\n'); 
    		DebugLocation(195, 16);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:195:16: ( '\\r' )?
    		int alt13=2;
    		try { DebugEnterSubRule(13);
    		try { DebugEnterDecision(13, decisionCanBacktrack[13]);
    		int LA13_1 = input.LA(1);

    		if ((LA13_1=='\r'))
    		{
    			alt13 = 1;
    		}
    		} finally { DebugExitDecision(13); }
    		switch (alt13)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:195:16: '\\r'
    			{
    			DebugLocation(195, 16);
    			Match('\r'); 

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(13); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NEWLINE", 27);
    		LeaveRule("NEWLINE", 27);
    		LeaveRule_NEWLINE();
        }
    }
    // $ANTLR end "NEWLINE"

    public override void mTokens()
    {
    	// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:8: ( T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | FLOAT | EXP | LOG | LN | Pi | SIN | COS | TG | CTG | SINH | COSH | TGH | CTGH | ARC | ASIN | ACOS | ATG | ACTG | NEWLINE )
    	int alt14=25;
    	try { DebugEnterDecision(14, decisionCanBacktrack[14]);
    	switch (input.LA(1))
    	{
    	case '(':
    		{
    		alt14 = 1;
    		}
    		break;
    	case ')':
    		{
    		alt14 = 2;
    		}
    		break;
    	case '*':
    		{
    		alt14 = 3;
    		}
    		break;
    	case '+':
    		{
    		alt14 = 4;
    		}
    		break;
    	case '-':
    		{
    		alt14 = 5;
    		}
    		break;
    	case '/':
    		{
    		alt14 = 6;
    		}
    		break;
    	case ',':
    	case '.':
    	case '0':
    	case '1':
    	case '2':
    	case '3':
    	case '4':
    	case '5':
    	case '6':
    	case '7':
    	case '8':
    	case '9':
    		{
    		alt14 = 7;
    		}
    		break;
    	case 'E':
    	case 'e':
    		{
    		alt14 = 8;
    		}
    		break;
    	case 'L':
    	case 'l':
    		{
    		int LA14_2 = input.LA(2);

    		if ((LA14_2=='o'))
    		{
    			alt14 = 9;
    		}
    		else if ((LA14_2=='n'))
    		{
    			alt14 = 10;
    		}

    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 14, 9, input, 2);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}

    		}
    		break;
    	case 'P':
    	case 'p':
    		{
    		alt14 = 11;
    		}
    		break;
    	case 'S':
    	case 's':
    		{
    		int LA14_2 = input.LA(2);

    		if ((LA14_2=='i'))
    		{
    			int LA14_3 = input.LA(3);

    			if ((LA14_3=='n'))
    			{
    				int LA14_4 = input.LA(4);

    				if ((LA14_4=='h'))
    				{
    					alt14 = 16;
    				}

    				else
    				{
    					alt14 = 12;
    				}

    			}

    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 14, 19, input, 3);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}

    		}

    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 14, 11, input, 2);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}

    		}
    		break;
    	case 'C':
    	case 'c':
    		{
    		int LA14_2 = input.LA(2);

    		if ((LA14_2=='o'))
    		{
    			int LA14_3 = input.LA(3);

    			if ((LA14_3=='s'))
    			{
    				int LA14_4 = input.LA(4);

    				if ((LA14_4=='h'))
    				{
    					alt14 = 17;
    				}

    				else
    				{
    					alt14 = 13;
    				}

    			}

    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 14, 20, input, 3);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}

    		}
    		else if ((LA14_2=='t'))
    		{
    			int LA14_3 = input.LA(3);

    			if ((LA14_3=='g'))
    			{
    				int LA14_4 = input.LA(4);

    				if ((LA14_4=='h'))
    				{
    					alt14 = 19;
    				}

    				else
    				{
    					alt14 = 15;
    				}

    			}

    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 14, 21, input, 3);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}

    		}

    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 14, 12, input, 2);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}

    		}
    		break;
    	case 'T':
    	case 't':
    		{
    		int LA14_2 = input.LA(2);

    		if ((LA14_2=='g'))
    		{
    			int LA14_3 = input.LA(3);

    			if ((LA14_3=='h'))
    			{
    				alt14 = 18;
    			}

    			else
    			{
    				alt14 = 14;
    			}

    		}

    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 14, 13, input, 2);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}

    		}
    		break;
    	case 'A':
    		{
    		switch (input.LA(2))
    		{
    		case 'r':
    			{
    			int LA14_3 = input.LA(3);

    			if ((LA14_3=='c'))
    			{
    				switch (input.LA(4))
    				{
    				case 'S':
    				case 's':
    					{
    					alt14 = 21;
    					}
    					break;
    				case 'C':
    				case 'c':
    					{
    					int LA14_5 = input.LA(5);

    					if ((LA14_5=='o'))
    					{
    						alt14 = 22;
    					}
    					else if ((LA14_5=='t'))
    					{
    						alt14 = 24;
    					}

    					else
    					{
    						NoViableAltException nvae = new NoViableAltException("", 14, 26, input, 5);
    						DebugRecognitionException(nvae);
    						throw nvae;
    					}

    					}
    					break;
    				case 'T':
    				case 't':
    					{
    					alt14 = 23;
    					}
    					break;
    				default:
    					alt14=20;
    					break;

    				}

    			}

    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 14, 23, input, 3);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}

    			}
    			break;
    		case 'S':
    		case 's':
    			{
    			alt14 = 21;
    			}
    			break;
    		case 'C':
    		case 'c':
    			{
    			int LA14_3 = input.LA(3);

    			if ((LA14_3=='o'))
    			{
    				alt14 = 22;
    			}
    			else if ((LA14_3=='t'))
    			{
    				alt14 = 24;
    			}

    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 14, 26, input, 3);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}

    			}
    			break;
    		case 'T':
    		case 't':
    			{
    			alt14 = 23;
    			}
    			break;
    		default:
    			alt14=20;
    			break;

    		}

    		}
    		break;
    	case 'a':
    		{
    		switch (input.LA(2))
    		{
    		case 'r':
    			{
    			int LA14_3 = input.LA(3);

    			if ((LA14_3=='c'))
    			{
    				switch (input.LA(4))
    				{
    				case 'S':
    				case 's':
    					{
    					alt14 = 21;
    					}
    					break;
    				case 'C':
    				case 'c':
    					{
    					int LA14_5 = input.LA(5);

    					if ((LA14_5=='o'))
    					{
    						alt14 = 22;
    					}
    					else if ((LA14_5=='t'))
    					{
    						alt14 = 24;
    					}

    					else
    					{
    						NoViableAltException nvae = new NoViableAltException("", 14, 26, input, 5);
    						DebugRecognitionException(nvae);
    						throw nvae;
    					}

    					}
    					break;
    				case 'T':
    				case 't':
    					{
    					alt14 = 23;
    					}
    					break;
    				default:
    					alt14=20;
    					break;

    				}

    			}

    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 14, 28, input, 3);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}

    			}
    			break;
    		case 'S':
    		case 's':
    			{
    			alt14 = 21;
    			}
    			break;
    		case 'C':
    		case 'c':
    			{
    			int LA14_3 = input.LA(3);

    			if ((LA14_3=='o'))
    			{
    				alt14 = 22;
    			}
    			else if ((LA14_3=='t'))
    			{
    				alt14 = 24;
    			}

    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 14, 26, input, 3);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}

    			}
    			break;
    		case 'T':
    		case 't':
    			{
    			alt14 = 23;
    			}
    			break;
    		default:
    			alt14=20;
    			break;

    		}

    		}
    		break;
    	case '\n':
    		{
    		alt14 = 25;
    		}
    		break;
    	default:
    		{
    			NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    	}

    	} finally { DebugExitDecision(14); }
    	switch (alt14)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:10: T__25
    		{
    		DebugLocation(1, 10);
    		mT__25(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:16: T__26
    		{
    		DebugLocation(1, 16);
    		mT__26(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:22: T__27
    		{
    		DebugLocation(1, 22);
    		mT__27(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:28: T__28
    		{
    		DebugLocation(1, 28);
    		mT__28(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:34: T__29
    		{
    		DebugLocation(1, 34);
    		mT__29(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:40: T__30
    		{
    		DebugLocation(1, 40);
    		mT__30(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:46: FLOAT
    		{
    		DebugLocation(1, 46);
    		mFLOAT(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:52: EXP
    		{
    		DebugLocation(1, 52);
    		mEXP(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:56: LOG
    		{
    		DebugLocation(1, 56);
    		mLOG(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:60: LN
    		{
    		DebugLocation(1, 60);
    		mLN(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:63: Pi
    		{
    		DebugLocation(1, 63);
    		mPi(); 

    		}
    		break;
    	case 12:
    		DebugEnterAlt(12);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:66: SIN
    		{
    		DebugLocation(1, 66);
    		mSIN(); 

    		}
    		break;
    	case 13:
    		DebugEnterAlt(13);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:70: COS
    		{
    		DebugLocation(1, 70);
    		mCOS(); 

    		}
    		break;
    	case 14:
    		DebugEnterAlt(14);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:74: TG
    		{
    		DebugLocation(1, 74);
    		mTG(); 

    		}
    		break;
    	case 15:
    		DebugEnterAlt(15);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:77: CTG
    		{
    		DebugLocation(1, 77);
    		mCTG(); 

    		}
    		break;
    	case 16:
    		DebugEnterAlt(16);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:81: SINH
    		{
    		DebugLocation(1, 81);
    		mSINH(); 

    		}
    		break;
    	case 17:
    		DebugEnterAlt(17);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:86: COSH
    		{
    		DebugLocation(1, 86);
    		mCOSH(); 

    		}
    		break;
    	case 18:
    		DebugEnterAlt(18);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:91: TGH
    		{
    		DebugLocation(1, 91);
    		mTGH(); 

    		}
    		break;
    	case 19:
    		DebugEnterAlt(19);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:95: CTGH
    		{
    		DebugLocation(1, 95);
    		mCTGH(); 

    		}
    		break;
    	case 20:
    		DebugEnterAlt(20);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:100: ARC
    		{
    		DebugLocation(1, 100);
    		mARC(); 

    		}
    		break;
    	case 21:
    		DebugEnterAlt(21);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:104: ASIN
    		{
    		DebugLocation(1, 104);
    		mASIN(); 

    		}
    		break;
    	case 22:
    		DebugEnterAlt(22);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:109: ACOS
    		{
    		DebugLocation(1, 109);
    		mACOS(); 

    		}
    		break;
    	case 23:
    		DebugEnterAlt(23);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:114: ATG
    		{
    		DebugLocation(1, 114);
    		mATG(); 

    		}
    		break;
    	case 24:
    		DebugEnterAlt(24);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:118: ACTG
    		{
    		DebugLocation(1, 118);
    		mACTG(); 

    		}
    		break;
    	case 25:
    		DebugEnterAlt(25);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:1:123: NEWLINE
    		{
    		DebugLocation(1, 123);
    		mNEWLINE(); 

    		}
    		break;

    	}

    }


	#region DFA
	DFA8 dfa8;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa8 = new DFA8(this);
	}

	private class DFA8 : DFA
	{
		private const string DFA8_eotS =
			"\x1\xFFFF\x1\x3\x3\xFFFF";
		private const string DFA8_eofS =
			"\x5\xFFFF";
		private const string DFA8_minS =
			"\x2\x2C\x3\xFFFF";
		private const string DFA8_maxS =
			"\x2\x39\x3\xFFFF";
		private const string DFA8_acceptS =
			"\x2\xFFFF\x1\x3\x1\x1\x1\x2";
		private const string DFA8_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA8_transitionS =
			{
				"\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x4\x1\xFFFF\x1\x4\x1\xFFFF\xA\x1",
				"",
				"",
				""
			};

		private static readonly short[] DFA8_eot = DFA.UnpackEncodedString(DFA8_eotS);
		private static readonly short[] DFA8_eof = DFA.UnpackEncodedString(DFA8_eofS);
		private static readonly char[] DFA8_min = DFA.UnpackEncodedStringToUnsignedChars(DFA8_minS);
		private static readonly char[] DFA8_max = DFA.UnpackEncodedStringToUnsignedChars(DFA8_maxS);
		private static readonly short[] DFA8_accept = DFA.UnpackEncodedString(DFA8_acceptS);
		private static readonly short[] DFA8_special = DFA.UnpackEncodedString(DFA8_specialS);
		private static readonly short[][] DFA8_transition;

		static DFA8()
		{
			int numStates = DFA8_transitionS.Length;
			DFA8_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA8_transition[i] = DFA.UnpackEncodedString(DFA8_transitionS[i]);
			}
		}

		public DFA8( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 8;
			this.eot = DFA8_eot;
			this.eof = DFA8_eof;
			this.min = DFA8_min;
			this.max = DFA8_max;
			this.accept = DFA8_accept;
			this.special = DFA8_special;
			this.transition = DFA8_transition;
		}

		public override string Description { get { return "164:1: FLOAT : ( ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ SEPARATOR ( '0' .. '9' )* ( EXPONENT )? | SEPARATOR ( '0' .. '9' )+ ( EXPONENT )? );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace  Generated 
