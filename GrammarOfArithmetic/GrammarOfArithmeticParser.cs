//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g 2016-12-06 11:36:12

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


	using System;
	using System.Collections;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace  Generated 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class GrammarOfArithmeticParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACOS", "ACTG", "ARC", "ASIN", "ATG", "COS", "COSH", "CTG", "CTGH", "EXP", "EXPONENT", "FLOAT", "LN", "LOG", "NEWLINE", "Pi", "SEPARATOR", "SIN", "SINH", "TG", "TGH", "'('", "')'", "'*'", "'+'", "'-'", "'/'"
	};
	public const int EOF=-1;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int ACOS=4;
	public const int ACTG=5;
	public const int ARC=6;
	public const int ASIN=7;
	public const int ATG=8;
	public const int COS=9;
	public const int COSH=10;
	public const int CTG=11;
	public const int CTGH=12;
	public const int EXP=13;
	public const int EXPONENT=14;
	public const int FLOAT=15;
	public const int LN=16;
	public const int LOG=17;
	public const int NEWLINE=18;
	public const int Pi=19;
	public const int SEPARATOR=20;
	public const int SIN=21;
	public const int SINH=22;
	public const int TG=23;
	public const int TGH=24;

	#if ANTLR_DEBUG
	private static readonly bool[] decisionCanBacktrack =
		new bool[]
		{
			false, // invalid decision
			false, false, false, false, false
		};
	#else
	private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public GrammarOfArithmeticParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public GrammarOfArithmeticParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return GrammarOfArithmeticParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g"; } }


		Hashtable memory = new Hashtable();


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_calc() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_calc() {}
	// $ANTLR start "calc"
	// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:17:8: public calc : ( statement )+ ;
	[GrammarRule("calc")]
	public void calc()
	{
		EnterRule_calc();
		EnterRule("calc", 1);
		TraceIn("calc", 1);
		try { DebugEnterRule(GrammarFileName, "calc");
		DebugLocation(17, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:18:2: ( ( statement )+ )
			DebugEnterAlt(1);
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:18:4: ( statement )+
			{
			DebugLocation(18, 4);
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:18:4: ( statement )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, decisionCanBacktrack[1]);
				int LA1_1 = input.LA(1);

				if ((LA1_1==FLOAT||LA1_1==NEWLINE||LA1_1==25))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:18:4: statement
					{
					DebugLocation(18, 4);
					PushFollow(Follow._statement_in_calc52);
					statement();
					PopFollow();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("calc", 1);
			LeaveRule("calc", 1);
			LeaveRule_calc();
	    }
	 	DebugLocation(19, 1);
		} finally { DebugExitRule(GrammarFileName, "calc"); }
		return;

	}
	// $ANTLR end "calc"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_statement() {}
	// $ANTLR start "statement"
	// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:21:1: statement : ( expr NEWLINE | NEWLINE );
	[GrammarRule("statement")]
	private void statement()
	{
		EnterRule_statement();
		EnterRule("statement", 2);
		TraceIn("statement", 2);
	    double expr1 = default(double);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(21, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:22:2: ( expr NEWLINE | NEWLINE )
			int alt2=2;
			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
			int LA2_1 = input.LA(1);

			if ((LA2_1==FLOAT||LA2_1==25))
			{
				alt2 = 1;
			}
			else if ((LA2_1==NEWLINE))
			{
				alt2 = 2;
			}

			else
			{
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:22:4: expr NEWLINE
				{
				DebugLocation(22, 4);
				PushFollow(Follow._expr_in_statement64);
				expr1=expr();
				PopFollow();

				DebugLocation(22, 9);
				Match(input,NEWLINE,Follow._NEWLINE_in_statement66); 
				DebugLocation(22, 17);
				 Console.WriteLine(expr1); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:23:4: NEWLINE
				{
				DebugLocation(23, 4);
				Match(input,NEWLINE,Follow._NEWLINE_in_statement73); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 2);
			LeaveRule("statement", 2);
			LeaveRule_statement();
	    }
	 	DebugLocation(24, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return;

	}
	// $ANTLR end "statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expr() {}
	// $ANTLR start "expr"
	// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:27:1: expr returns [double value] : me1= multExpression ( '+' me2= multExpression | '-' me2= multExpression )* ;
	[GrammarRule("expr")]
	private double expr()
	{
		EnterRule_expr();
		EnterRule("expr", 3);
		TraceIn("expr", 3);
	    double value = default(double);


	    double me1 = default(double);
	    double me2 = default(double);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(27, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:28:2: (me1= multExpression ( '+' me2= multExpression | '-' me2= multExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:28:4: me1= multExpression ( '+' me2= multExpression | '-' me2= multExpression )*
			{
			DebugLocation(28, 7);
			PushFollow(Follow._multExpression_in_expr91);
			me1=multExpression();
			PopFollow();

			DebugLocation(28, 23);
			value = me1;
			DebugLocation(29, 2);
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:29:2: ( '+' me2= multExpression | '-' me2= multExpression )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=3;
				try { DebugEnterDecision(3, decisionCanBacktrack[3]);
				int LA3_1 = input.LA(1);

				if ((LA3_1==28))
				{
					alt3 = 1;
				}
				else if ((LA3_1==29))
				{
					alt3 = 2;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:29:3: '+' me2= multExpression
					{
					DebugLocation(29, 3);
					Match(input,28,Follow._28_in_expr97); 
					DebugLocation(29, 10);
					PushFollow(Follow._multExpression_in_expr101);
					me2=multExpression();
					PopFollow();

					DebugLocation(29, 26);
					value += me2;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:30:3: '-' me2= multExpression
					{
					DebugLocation(30, 3);
					Match(input,29,Follow._29_in_expr107); 
					DebugLocation(30, 10);
					PushFollow(Follow._multExpression_in_expr111);
					me2=multExpression();
					PopFollow();

					DebugLocation(30, 26);
					value -= me2;

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 3);
			LeaveRule("expr", 3);
			LeaveRule_expr();
	    }
	 	DebugLocation(31, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_multExpression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_multExpression() {}
	// $ANTLR start "multExpression"
	// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:33:1: multExpression returns [double value] : a1= atom ( '*' a2= atom | '/' a2= atom )* ;
	[GrammarRule("multExpression")]
	private double multExpression()
	{
		EnterRule_multExpression();
		EnterRule("multExpression", 4);
		TraceIn("multExpression", 4);
	    double value = default(double);


	    double a1 = default(double);
	    double a2 = default(double);

		try { DebugEnterRule(GrammarFileName, "multExpression");
		DebugLocation(33, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:34:2: (a1= atom ( '*' a2= atom | '/' a2= atom )* )
			DebugEnterAlt(1);
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:34:4: a1= atom ( '*' a2= atom | '/' a2= atom )*
			{
			DebugLocation(34, 6);
			PushFollow(Follow._atom_in_multExpression131);
			a1=atom();
			PopFollow();

			DebugLocation(34, 12);
			value = a1;
			DebugLocation(35, 2);
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:35:2: ( '*' a2= atom | '/' a2= atom )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=3;
				try { DebugEnterDecision(4, decisionCanBacktrack[4]);
				int LA4_1 = input.LA(1);

				if ((LA4_1==27))
				{
					alt4 = 1;
				}
				else if ((LA4_1==30))
				{
					alt4 = 2;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:35:3: '*' a2= atom
					{
					DebugLocation(35, 3);
					Match(input,27,Follow._27_in_multExpression137); 
					DebugLocation(35, 9);
					PushFollow(Follow._atom_in_multExpression141);
					a2=atom();
					PopFollow();

					DebugLocation(35, 15);
					value *= a2;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:36:3: '/' a2= atom
					{
					DebugLocation(36, 3);
					Match(input,30,Follow._30_in_multExpression147); 
					DebugLocation(36, 9);
					PushFollow(Follow._atom_in_multExpression151);
					a2=atom();
					PopFollow();

					DebugLocation(36, 15);
					value /= a2;

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("multExpression", 4);
			LeaveRule("multExpression", 4);
			LeaveRule_multExpression();
	    }
	 	DebugLocation(37, 1);
		} finally { DebugExitRule(GrammarFileName, "multExpression"); }
		return value;

	}
	// $ANTLR end "multExpression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_atom() {}
	// $ANTLR start "atom"
	// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:39:1: atom returns [double value] : ( FLOAT | '(' expr ')' );
	[GrammarRule("atom")]
	private double atom()
	{
		EnterRule_atom();
		EnterRule("atom", 5);
		TraceIn("atom", 5);
	    double value = default(double);


	    IToken FLOAT2 = default(IToken);
	    double expr3 = default(double);

		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(39, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:40:2: ( FLOAT | '(' expr ')' )
			int alt5=2;
			try { DebugEnterDecision(5, decisionCanBacktrack[5]);
			int LA5_1 = input.LA(1);

			if ((LA5_1==FLOAT))
			{
				alt5 = 1;
			}
			else if ((LA5_1==25))
			{
				alt5 = 2;
			}

			else
			{
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:40:4: FLOAT
				{
				DebugLocation(40, 4);
				FLOAT2=(IToken)Match(input,FLOAT,Follow._FLOAT_in_atom169); 
				DebugLocation(40, 10);
				value = double.Parse((FLOAT2!=null?FLOAT2.Text:default(string)));

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:41:4: '(' expr ')'
				{
				DebugLocation(41, 4);
				Match(input,25,Follow._25_in_atom176); 
				DebugLocation(41, 8);
				PushFollow(Follow._expr_in_atom178);
				expr3=expr();
				PopFollow();

				DebugLocation(41, 13);
				Match(input,26,Follow._26_in_atom180); 
				DebugLocation(41, 17);
				value = expr3;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("atom", 5);
			LeaveRule("atom", 5);
			LeaveRule_atom();
	    }
	 	DebugLocation(42, 1);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return value;

	}
	// $ANTLR end "atom"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _statement_in_calc52 = new BitSet(new ulong[]{0x2048002UL});
		public static readonly BitSet _expr_in_statement64 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _NEWLINE_in_statement66 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_statement73 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _multExpression_in_expr91 = new BitSet(new ulong[]{0x30000002UL});
		public static readonly BitSet _28_in_expr97 = new BitSet(new ulong[]{0x2008000UL});
		public static readonly BitSet _multExpression_in_expr101 = new BitSet(new ulong[]{0x30000002UL});
		public static readonly BitSet _29_in_expr107 = new BitSet(new ulong[]{0x2008000UL});
		public static readonly BitSet _multExpression_in_expr111 = new BitSet(new ulong[]{0x30000002UL});
		public static readonly BitSet _atom_in_multExpression131 = new BitSet(new ulong[]{0x48000002UL});
		public static readonly BitSet _27_in_multExpression137 = new BitSet(new ulong[]{0x2008000UL});
		public static readonly BitSet _atom_in_multExpression141 = new BitSet(new ulong[]{0x48000002UL});
		public static readonly BitSet _30_in_multExpression147 = new BitSet(new ulong[]{0x2008000UL});
		public static readonly BitSet _atom_in_multExpression151 = new BitSet(new ulong[]{0x48000002UL});
		public static readonly BitSet _FLOAT_in_atom169 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _25_in_atom176 = new BitSet(new ulong[]{0x2008000UL});
		public static readonly BitSet _expr_in_atom178 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_atom180 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Generated 
