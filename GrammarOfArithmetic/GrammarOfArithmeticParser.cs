//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g 2016-12-10 12:01:53

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


	using System;
	using System.Collections;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace  Generated 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class GrammarOfArithmeticParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "EXPONENT", "FLOAT", "FLOATSEPARATOR", "ID", "NEWLINE", "SEPARATOR", "'!!'", "'!'", "'('", "')'", "'*'", "'+'", "'-'", "'/'", "':'", "'<'", "'='", "'>'", "'['", "']'", "'^'", "'abs('", "'acos('", "'actg('", "'asin('", "'atg('", "'atg2('", "'ch('", "'cos('", "'cosec('", "'csch('", "'ctg('", "'cth('", "'div'", "'div('", "'e'", "'exp('", "'lg('", "'ln('", "'log('", "'max('", "'min('", "'mod'", "'mod('", "'pi'", "'pow('", "'root('", "'sec('", "'sech('", "'sh('", "'sin('", "'sqr('", "'sqrt('", "'tg('", "'th('", "'{'", "'}'"
	};
	public const int EOF=-1;
	public const int T__10=10;
	public const int T__11=11;
	public const int T__12=12;
	public const int T__13=13;
	public const int T__14=14;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int EXPONENT=4;
	public const int FLOAT=5;
	public const int FLOATSEPARATOR=6;
	public const int ID=7;
	public const int NEWLINE=8;
	public const int SEPARATOR=9;

	#if ANTLR_DEBUG
	private static readonly bool[] decisionCanBacktrack =
		new bool[]
		{
			false, // invalid decision
			false, false, false, false, false, false, false, false, false, false, 
			false, false, false, false, false, false, false, false
		};
	#else
	private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public GrammarOfArithmeticParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public GrammarOfArithmeticParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return GrammarOfArithmeticParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g"; } }


		private static Hashtable memory = new Hashtable();
		
		private double Factorial(double n)
	        {
	            double f = 1;
	            for (int i = 1; i <= (int)n; i++)
	            {
	                f *= i;
	            }
	            return f;
	        }

	        private double DoubleFactorial(double n)
	        {
	            double f = 1;
	            for (int i = (int)n % 2==0?2:1; i <= (int)n; i+=2)
	            {
	                f *= i;
	            }
	            return f;
	        }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_graph() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_graph() {}
	// $ANTLR start "graph"
	// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:38:8: public graph returns [double value] : ( ID '=' a1= expr NEWLINE a2= expr NEWLINE | NEWLINE );
	[GrammarRule("graph")]
	public double graph()
	{
		EnterRule_graph();
		EnterRule("graph", 1);
		TraceIn("graph", 1);
	    double value = default(double);


	    IToken ID1 = default(IToken);
	    double a1 = default(double);
	    double a2 = default(double);

		try { DebugEnterRule(GrammarFileName, "graph");
		DebugLocation(38, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:39:2: ( ID '=' a1= expr NEWLINE a2= expr NEWLINE | NEWLINE )
			int alt1=2;
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_1 = input.LA(1);

			if ((LA1_1==ID))
			{
				alt1 = 1;
			}
			else if ((LA1_1==NEWLINE))
			{
				alt1 = 2;
			}

			else
			{
				NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:39:4: ID '=' a1= expr NEWLINE a2= expr NEWLINE
				{
				DebugLocation(39, 4);
				ID1=(IToken)Match(input,ID,Follow._ID_in_graph55); 
				DebugLocation(39, 7);
				Match(input,20,Follow._20_in_graph57); 
				DebugLocation(39, 14);
				PushFollow(Follow._expr_in_graph63);
				a1=expr();
				PopFollow();

				DebugLocation(39, 21);
				Match(input,NEWLINE,Follow._NEWLINE_in_graph65); 
				DebugLocation(40, 3);
				 if(!memory.ContainsKey((ID1!=null?ID1.Text:default(string))))
							memory.Add((ID1!=null?ID1.Text:default(string)), a1);
						  else
							memory[(ID1!=null?ID1.Text:default(string))] = a1;
						
				DebugLocation(45, 5);
				PushFollow(Follow._expr_in_graph77);
				a2=expr();
				PopFollow();

				DebugLocation(45, 12);
				 value = a2; 
				DebugLocation(45, 36);
				Match(input,NEWLINE,Follow._NEWLINE_in_graph81); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:46:4: NEWLINE
				{
				DebugLocation(46, 4);
				Match(input,NEWLINE,Follow._NEWLINE_in_graph86); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("graph", 1);
			LeaveRule("graph", 1);
			LeaveRule_graph();
	    }
	 	DebugLocation(47, 1);
		} finally { DebugExitRule(GrammarFileName, "graph"); }
		return value;

	}
	// $ANTLR end "graph"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_calc() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_calc() {}
	// $ANTLR start "calc"
	// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:49:8: public calc returns [string value] : ( statement )+ ;
	[GrammarRule("calc")]
	public string calc()
	{
		EnterRule_calc();
		EnterRule("calc", 2);
		TraceIn("calc", 2);
	    string value = default(string);


	    string statement2 = default(string);

		try { DebugEnterRule(GrammarFileName, "calc");
		DebugLocation(49, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:50:2: ( ( statement )+ )
			DebugEnterAlt(1);
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:50:5: ( statement )+
			{
			DebugLocation(50, 5);
			value = "";
			DebugLocation(50, 20);
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:50:20: ( statement )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_1 = input.LA(1);

				if ((LA2_1==FLOAT||(LA2_1>=ID && LA2_1<=NEWLINE)||LA2_1==12||LA2_1==16||LA2_1==22||(LA2_1>=25 && LA2_1<=36)||(LA2_1>=38 && LA2_1<=45)||(LA2_1>=47 && LA2_1<=59)))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:50:21: statement
					{
					DebugLocation(50, 21);
					PushFollow(Follow._statement_in_calc106);
					statement2=statement();
					PopFollow();

					DebugLocation(50, 31);
					value += statement2;

					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("calc", 2);
			LeaveRule("calc", 2);
			LeaveRule_calc();
	    }
	 	DebugLocation(51, 1);
		} finally { DebugExitRule(GrammarFileName, "calc"); }
		return value;

	}
	// $ANTLR end "calc"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_statement() {}
	// $ANTLR start "statement"
	// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:53:1: statement returns [string value] : ( expr ( '=' )? NEWLINE | ID '=' a1= expr NEWLINE | NEWLINE );
	[GrammarRule("statement")]
	private string statement()
	{
		EnterRule_statement();
		EnterRule("statement", 3);
		TraceIn("statement", 3);
	    string value = default(string);


	    IToken ID4 = default(IToken);
	    double a1 = default(double);
	    double expr3 = default(double);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(53, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:54:2: ( expr ( '=' )? NEWLINE | ID '=' a1= expr NEWLINE | NEWLINE )
			int alt4=3;
			try { DebugEnterDecision(4, decisionCanBacktrack[4]);
			switch (input.LA(1))
			{
			case FLOAT:
			case 12:
			case 16:
			case 22:
			case 25:
			case 26:
			case 27:
			case 28:
			case 29:
			case 30:
			case 31:
			case 32:
			case 33:
			case 34:
			case 35:
			case 36:
			case 38:
			case 39:
			case 40:
			case 41:
			case 42:
			case 43:
			case 44:
			case 45:
			case 47:
			case 48:
			case 49:
			case 50:
			case 51:
			case 52:
			case 53:
			case 54:
			case 55:
			case 56:
			case 57:
			case 58:
			case 59:
				{
				alt4 = 1;
				}
				break;
			case ID:
				{
				int LA4_2 = input.LA(2);

				if ((LA4_2==20))
				{
					int LA4_3 = input.LA(3);

					if ((LA4_3==FLOAT||LA4_3==ID||LA4_3==12||LA4_3==16||LA4_3==22||(LA4_3>=25 && LA4_3<=36)||(LA4_3>=38 && LA4_3<=45)||(LA4_3>=47 && LA4_3<=59)))
					{
						alt4 = 2;
					}
					else if ((LA4_3==NEWLINE))
					{
						alt4 = 1;
					}

					else
					{
						NoViableAltException nvae = new NoViableAltException("", 4, 4, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}

				}
				else if ((LA4_2==NEWLINE||(LA4_2>=10 && LA4_2<=11)||(LA4_2>=14 && LA4_2<=19)||LA4_2==21||LA4_2==24||LA4_2==37||LA4_2==46))
				{
					alt4 = 1;
				}

				else
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case NEWLINE:
				{
				alt4 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:54:4: expr ( '=' )? NEWLINE
				{
				DebugLocation(54, 4);
				PushFollow(Follow._expr_in_statement124);
				expr3=expr();
				PopFollow();

				DebugLocation(54, 9);
				value = " = ";
				DebugLocation(54, 26);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:54:26: ( '=' )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, decisionCanBacktrack[3]);
				int LA3_1 = input.LA(1);

				if ((LA3_1==20))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:54:27: '='
					{
					DebugLocation(54, 27);
					Match(input,20,Follow._20_in_statement128); 
					DebugLocation(54, 30);
					value = " ";

					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(54, 48);
				Match(input,NEWLINE,Follow._NEWLINE_in_statement133); 
				DebugLocation(54, 56);
				 value += expr3; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:55:4: ID '=' a1= expr NEWLINE
				{
				DebugLocation(55, 4);
				ID4=(IToken)Match(input,ID,Follow._ID_in_statement140); 
				DebugLocation(55, 7);
				Match(input,20,Follow._20_in_statement142); 
				DebugLocation(55, 14);
				PushFollow(Follow._expr_in_statement148);
				a1=expr();
				PopFollow();

				DebugLocation(55, 21);
				value = '=' + a1.ToString();
				DebugLocation(55, 60);
				Match(input,NEWLINE,Follow._NEWLINE_in_statement152); 
				DebugLocation(56, 3);
				 if(!memory.ContainsKey((ID4!=null?ID4.Text:default(string))))
							memory.Add((ID4!=null?ID4.Text:default(string)), a1);
						  else
							memory[(ID4!=null?ID4.Text:default(string))] = a1;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:60:4: NEWLINE
				{
				DebugLocation(60, 4);
				Match(input,NEWLINE,Follow._NEWLINE_in_statement162); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 3);
			LeaveRule("statement", 3);
			LeaveRule_statement();
	    }
	 	DebugLocation(61, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return value;

	}
	// $ANTLR end "statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expr() {}
	// $ANTLR start "expr"
	// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:64:1: expr returns [double value] : ( '-' me1= multExpression |me1= multExpression ) ( '+' me2= multExpression | '-' me2= multExpression )* ;
	[GrammarRule("expr")]
	private double expr()
	{
		EnterRule_expr();
		EnterRule("expr", 4);
		TraceIn("expr", 4);
	    double value = default(double);


	    double me1 = default(double);
	    double me2 = default(double);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(64, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:65:2: ( ( '-' me1= multExpression |me1= multExpression ) ( '+' me2= multExpression | '-' me2= multExpression )* )
			DebugEnterAlt(1);
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:65:4: ( '-' me1= multExpression |me1= multExpression ) ( '+' me2= multExpression | '-' me2= multExpression )*
			{
			DebugLocation(65, 4);
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:65:4: ( '-' me1= multExpression |me1= multExpression )
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, decisionCanBacktrack[5]);
			int LA5_1 = input.LA(1);

			if ((LA5_1==16))
			{
				alt5 = 1;
			}
			else if ((LA5_1==FLOAT||LA5_1==ID||LA5_1==12||LA5_1==22||(LA5_1>=25 && LA5_1<=36)||(LA5_1>=38 && LA5_1<=45)||(LA5_1>=47 && LA5_1<=59)))
			{
				alt5 = 2;
			}

			else
			{
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:65:5: '-' me1= multExpression
				{
				DebugLocation(65, 5);
				Match(input,16,Follow._16_in_expr179); 
				DebugLocation(65, 11);
				PushFollow(Follow._multExpression_in_expr182);
				me1=multExpression();
				PopFollow();

				DebugLocation(65, 27);
				value = -me1;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:66:5: me1= multExpression
				{
				DebugLocation(66, 8);
				PushFollow(Follow._multExpression_in_expr193);
				me1=multExpression();
				PopFollow();

				DebugLocation(66, 24);
				value = me1;

				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(67, 2);
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:67:2: ( '+' me2= multExpression | '-' me2= multExpression )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=3;
				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
				int LA6_1 = input.LA(1);

				if ((LA6_1==15))
				{
					alt6 = 1;
				}
				else if ((LA6_1==16))
				{
					alt6 = 2;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:67:3: '+' me2= multExpression
					{
					DebugLocation(67, 3);
					Match(input,15,Follow._15_in_expr200); 
					DebugLocation(67, 10);
					PushFollow(Follow._multExpression_in_expr204);
					me2=multExpression();
					PopFollow();

					DebugLocation(67, 26);
					value += me2;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:68:3: '-' me2= multExpression
					{
					DebugLocation(68, 3);
					Match(input,16,Follow._16_in_expr210); 
					DebugLocation(68, 10);
					PushFollow(Follow._multExpression_in_expr214);
					me2=multExpression();
					PopFollow();

					DebugLocation(68, 26);
					value -= me2;

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 4);
			LeaveRule("expr", 4);
			LeaveRule_expr();
	    }
	 	DebugLocation(69, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_multExpression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_multExpression() {}
	// $ANTLR start "multExpression"
	// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:71:1: multExpression returns [double value] : a1= fanc ( '^' a2= fanc | '*' a2= fanc | ( '/' | ':' ) a2= fanc | 'div' a2= fanc | 'mod' a2= fanc | '>' a2= fanc | '<' a2= fanc )* ;
	[GrammarRule("multExpression")]
	private double multExpression()
	{
		EnterRule_multExpression();
		EnterRule("multExpression", 5);
		TraceIn("multExpression", 5);
	    double value = default(double);


	    double a1 = default(double);
	    double a2 = default(double);

		try { DebugEnterRule(GrammarFileName, "multExpression");
		DebugLocation(71, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:72:2: (a1= fanc ( '^' a2= fanc | '*' a2= fanc | ( '/' | ':' ) a2= fanc | 'div' a2= fanc | 'mod' a2= fanc | '>' a2= fanc | '<' a2= fanc )* )
			DebugEnterAlt(1);
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:72:4: a1= fanc ( '^' a2= fanc | '*' a2= fanc | ( '/' | ':' ) a2= fanc | 'div' a2= fanc | 'mod' a2= fanc | '>' a2= fanc | '<' a2= fanc )*
			{
			DebugLocation(72, 6);
			PushFollow(Follow._fanc_in_multExpression234);
			a1=fanc();
			PopFollow();

			DebugLocation(72, 12);
			value = a1;
			DebugLocation(73, 2);
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:73:2: ( '^' a2= fanc | '*' a2= fanc | ( '/' | ':' ) a2= fanc | 'div' a2= fanc | 'mod' a2= fanc | '>' a2= fanc | '<' a2= fanc )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=8;
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				switch (input.LA(1))
				{
				case 24:
					{
					alt7 = 1;
					}
					break;
				case 14:
					{
					alt7 = 2;
					}
					break;
				case 17:
				case 18:
					{
					alt7 = 3;
					}
					break;
				case 37:
					{
					alt7 = 4;
					}
					break;
				case 46:
					{
					alt7 = 5;
					}
					break;
				case 21:
					{
					alt7 = 6;
					}
					break;
				case 19:
					{
					alt7 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:73:3: '^' a2= fanc
					{
					DebugLocation(73, 3);
					Match(input,24,Follow._24_in_multExpression240); 
					DebugLocation(73, 9);
					PushFollow(Follow._fanc_in_multExpression244);
					a2=fanc();
					PopFollow();

					DebugLocation(73, 15);
					value = Math.Pow(value, a2);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:74:4: '*' a2= fanc
					{
					DebugLocation(74, 4);
					Match(input,14,Follow._14_in_multExpression251); 
					DebugLocation(74, 10);
					PushFollow(Follow._fanc_in_multExpression255);
					a2=fanc();
					PopFollow();

					DebugLocation(74, 16);
					value *= a2;

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:75:4: ( '/' | ':' ) a2= fanc
					{
					DebugLocation(75, 4);
					if ((input.LA(1)>=17 && input.LA(1)<=18))
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(75, 16);
					PushFollow(Follow._fanc_in_multExpression270);
					a2=fanc();
					PopFollow();

					DebugLocation(75, 22);
					value /= a2;

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:76:5: 'div' a2= fanc
					{
					DebugLocation(76, 5);
					Match(input,37,Follow._37_in_multExpression278); 
					DebugLocation(76, 14);
					PushFollow(Follow._fanc_in_multExpression284);
					a2=fanc();
					PopFollow();

					DebugLocation(76, 21);
					value = (int)a1/(int)a2;

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:77:5: 'mod' a2= fanc
					{
					DebugLocation(77, 5);
					Match(input,46,Follow._46_in_multExpression292); 
					DebugLocation(77, 14);
					PushFollow(Follow._fanc_in_multExpression298);
					a2=fanc();
					PopFollow();

					DebugLocation(77, 21);
					value = (int)a1%(int)a2;

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:78:5: '>' a2= fanc
					{
					DebugLocation(78, 5);
					Match(input,21,Follow._21_in_multExpression306); 
					DebugLocation(78, 12);
					PushFollow(Follow._fanc_in_multExpression312);
					a2=fanc();
					PopFollow();

					DebugLocation(78, 19);
					value = Math.Max(a1, a2);

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:79:5: '<' a2= fanc
					{
					DebugLocation(79, 5);
					Match(input,19,Follow._19_in_multExpression320); 
					DebugLocation(79, 12);
					PushFollow(Follow._fanc_in_multExpression326);
					a2=fanc();
					PopFollow();

					DebugLocation(79, 19);
					value = Math.Min(a1, a2);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("multExpression", 5);
			LeaveRule("multExpression", 5);
			LeaveRule_multExpression();
	    }
	 	DebugLocation(81, 1);
		} finally { DebugExitRule(GrammarFileName, "multExpression"); }
		return value;

	}
	// $ANTLR end "multExpression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_fanc() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_fanc() {}
	// $ANTLR start "fanc"
	// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:83:1: fanc returns [double value] : ( exponentiationFanc | trigonometryFanc | bracket ) ( '!!' | '!' )? ;
	[GrammarRule("fanc")]
	private double fanc()
	{
		EnterRule_fanc();
		EnterRule("fanc", 6);
		TraceIn("fanc", 6);
	    double value = default(double);


	    double exponentiationFanc5 = default(double);
	    double trigonometryFanc6 = default(double);
	    double bracket7 = default(double);

		try { DebugEnterRule(GrammarFileName, "fanc");
		DebugLocation(83, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:84:2: ( ( exponentiationFanc | trigonometryFanc | bracket ) ( '!!' | '!' )? )
			DebugEnterAlt(1);
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:84:4: ( exponentiationFanc | trigonometryFanc | bracket ) ( '!!' | '!' )?
			{
			DebugLocation(84, 4);
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:84:4: ( exponentiationFanc | trigonometryFanc | bracket )
			int alt8=3;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			switch (input.LA(1))
			{
			case 39:
			case 40:
			case 41:
			case 42:
			case 43:
			case 49:
			case 50:
			case 55:
			case 56:
				{
				alt8 = 1;
				}
				break;
			case 26:
			case 27:
			case 28:
			case 29:
			case 30:
			case 31:
			case 32:
			case 33:
			case 34:
			case 35:
			case 36:
			case 48:
			case 51:
			case 52:
			case 53:
			case 54:
			case 57:
			case 58:
				{
				alt8 = 2;
				}
				break;
			case FLOAT:
			case ID:
			case 12:
			case 22:
			case 25:
			case 38:
			case 44:
			case 45:
			case 47:
			case 59:
				{
				alt8 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:84:5: exponentiationFanc
				{
				DebugLocation(84, 5);
				PushFollow(Follow._exponentiationFanc_in_fanc347);
				exponentiationFanc5=exponentiationFanc();
				PopFollow();

				DebugLocation(84, 24);
				value = exponentiationFanc5;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:85:4: trigonometryFanc
				{
				DebugLocation(85, 4);
				PushFollow(Follow._trigonometryFanc_in_fanc354);
				trigonometryFanc6=trigonometryFanc();
				PopFollow();

				DebugLocation(85, 21);
				value = trigonometryFanc6;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:86:4: bracket
				{
				DebugLocation(86, 4);
				PushFollow(Follow._bracket_in_fanc361);
				bracket7=bracket();
				PopFollow();

				DebugLocation(86, 12);
				value = bracket7;

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(87, 2);
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:87:2: ( '!!' | '!' )?
			int alt9=3;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_1 = input.LA(1);

			if ((LA9_1==10))
			{
				alt9 = 1;
			}
			else if ((LA9_1==11))
			{
				alt9 = 2;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:87:3: '!!'
				{
				DebugLocation(87, 3);
				Match(input,10,Follow._10_in_fanc368); 
				DebugLocation(87, 8);
				value = DoubleFactorial(value);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:88:4: '!'
				{
				DebugLocation(88, 4);
				Match(input,11,Follow._11_in_fanc375); 
				DebugLocation(88, 9);
				value = Factorial(value);

				}
				break;

			}
			} finally { DebugExitSubRule(9); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fanc", 6);
			LeaveRule("fanc", 6);
			LeaveRule_fanc();
	    }
	 	DebugLocation(89, 1);
		} finally { DebugExitRule(GrammarFileName, "fanc"); }
		return value;

	}
	// $ANTLR end "fanc"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_bracket() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_bracket() {}
	// $ANTLR start "bracket"
	// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:91:1: bracket returns [double value] : ( ID | FLOAT | ( '(' a1= expr ')' | '{' a1= expr '}' ) | '[' expr ']' | 'abs(' expr ')' | 'max(' a1= expr ( SEPARATOR a2= expr )+ ')' | 'min(' a1= expr ( SEPARATOR a2= expr )+ ')' | 'div(' a1= expr SEPARATOR a2= expr ')' | 'mod(' a1= expr SEPARATOR a2= expr ')' );
	[GrammarRule("bracket")]
	private double bracket()
	{
		EnterRule_bracket();
		EnterRule("bracket", 7);
		TraceIn("bracket", 7);
	    double value = default(double);


	    IToken ID8 = default(IToken);
	    IToken FLOAT9 = default(IToken);
	    double a1 = default(double);
	    double a2 = default(double);
	    double expr10 = default(double);
	    double expr11 = default(double);

		try { DebugEnterRule(GrammarFileName, "bracket");
		DebugLocation(91, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:92:2: ( ID | FLOAT | ( '(' a1= expr ')' | '{' a1= expr '}' ) | '[' expr ']' | 'abs(' expr ')' | 'max(' a1= expr ( SEPARATOR a2= expr )+ ')' | 'min(' a1= expr ( SEPARATOR a2= expr )+ ')' | 'div(' a1= expr SEPARATOR a2= expr ')' | 'mod(' a1= expr SEPARATOR a2= expr ')' )
			int alt13=9;
			try { DebugEnterDecision(13, decisionCanBacktrack[13]);
			switch (input.LA(1))
			{
			case ID:
				{
				alt13 = 1;
				}
				break;
			case FLOAT:
				{
				alt13 = 2;
				}
				break;
			case 12:
			case 59:
				{
				alt13 = 3;
				}
				break;
			case 22:
				{
				alt13 = 4;
				}
				break;
			case 25:
				{
				alt13 = 5;
				}
				break;
			case 44:
				{
				alt13 = 6;
				}
				break;
			case 45:
				{
				alt13 = 7;
				}
				break;
			case 38:
				{
				alt13 = 8;
				}
				break;
			case 47:
				{
				alt13 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:92:4: ID
				{
				DebugLocation(92, 4);
				ID8=(IToken)Match(input,ID,Follow._ID_in_bracket394); 
				DebugLocation(92, 7);
				value = (double)memory[(ID8!=null?ID8.Text:default(string))];

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:93:4: FLOAT
				{
				DebugLocation(93, 4);
				FLOAT9=(IToken)Match(input,FLOAT,Follow._FLOAT_in_bracket401); 
				DebugLocation(93, 10);
				value = double.Parse((FLOAT9!=null?FLOAT9.Text:default(string)));

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:94:3: ( '(' a1= expr ')' | '{' a1= expr '}' )
				{
				DebugLocation(94, 3);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:94:3: ( '(' a1= expr ')' | '{' a1= expr '}' )
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, decisionCanBacktrack[10]);
				int LA10_1 = input.LA(1);

				if ((LA10_1==12))
				{
					alt10 = 1;
				}
				else if ((LA10_1==59))
				{
					alt10 = 2;
				}

				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:94:4: '(' a1= expr ')'
					{
					DebugLocation(94, 4);
					Match(input,12,Follow._12_in_bracket408); 
					DebugLocation(94, 11);
					PushFollow(Follow._expr_in_bracket414);
					a1=expr();
					PopFollow();

					DebugLocation(94, 18);
					Match(input,13,Follow._13_in_bracket416); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:94:22: '{' a1= expr '}'
					{
					DebugLocation(94, 22);
					Match(input,59,Follow._59_in_bracket418); 
					DebugLocation(94, 29);
					PushFollow(Follow._expr_in_bracket424);
					a1=expr();
					PopFollow();

					DebugLocation(94, 36);
					Match(input,60,Follow._60_in_bracket426); 

					}
					break;

				}
				} finally { DebugExitSubRule(10); }

				DebugLocation(94, 41);
				value = a1;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:95:4: '[' expr ']'
				{
				DebugLocation(95, 4);
				Match(input,22,Follow._22_in_bracket434); 
				DebugLocation(95, 8);
				PushFollow(Follow._expr_in_bracket436);
				expr10=expr();
				PopFollow();

				DebugLocation(95, 13);
				Match(input,23,Follow._23_in_bracket438); 
				DebugLocation(95, 17);
				value = Math.Abs(expr10);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:96:4: 'abs(' expr ')'
				{
				DebugLocation(96, 4);
				Match(input,25,Follow._25_in_bracket445); 
				DebugLocation(96, 11);
				PushFollow(Follow._expr_in_bracket447);
				expr11=expr();
				PopFollow();

				DebugLocation(96, 16);
				Match(input,13,Follow._13_in_bracket449); 
				DebugLocation(96, 20);
				value = Math.Abs(expr11);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:97:4: 'max(' a1= expr ( SEPARATOR a2= expr )+ ')'
				{
				DebugLocation(97, 4);
				Match(input,44,Follow._44_in_bracket456); 
				DebugLocation(97, 13);
				PushFollow(Follow._expr_in_bracket461);
				a1=expr();
				PopFollow();

				DebugLocation(97, 20);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:97:20: ( SEPARATOR a2= expr )+
				int cnt11=0;
				try { DebugEnterSubRule(11);
				while (true)
				{
					int alt11=2;
					try { DebugEnterDecision(11, decisionCanBacktrack[11]);
					int LA11_1 = input.LA(1);

					if ((LA11_1==SEPARATOR))
					{
						alt11 = 1;
					}


					} finally { DebugExitDecision(11); }
					switch (alt11)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:97:21: SEPARATOR a2= expr
						{
						DebugLocation(97, 21);
						Match(input,SEPARATOR,Follow._SEPARATOR_in_bracket464); 
						DebugLocation(97, 34);
						PushFollow(Follow._expr_in_bracket470);
						a2=expr();
						PopFollow();

						DebugLocation(97, 41);
						a1 = Math.Max(a1, a2);

						}
						break;

					default:
						if (cnt11 >= 1)
							goto loop11;

						EarlyExitException eee11 = new EarlyExitException( 11, input );
						DebugRecognitionException(eee11);
						throw eee11;
					}
					cnt11++;
				}
				loop11:
					;

				} finally { DebugExitSubRule(11); }

				DebugLocation(97, 68);
				Match(input,13,Follow._13_in_bracket476); 
				DebugLocation(97, 72);
				value = a1;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:98:4: 'min(' a1= expr ( SEPARATOR a2= expr )+ ')'
				{
				DebugLocation(98, 4);
				Match(input,45,Follow._45_in_bracket483); 
				DebugLocation(98, 13);
				PushFollow(Follow._expr_in_bracket488);
				a1=expr();
				PopFollow();

				DebugLocation(98, 20);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:98:20: ( SEPARATOR a2= expr )+
				int cnt12=0;
				try { DebugEnterSubRule(12);
				while (true)
				{
					int alt12=2;
					try { DebugEnterDecision(12, decisionCanBacktrack[12]);
					int LA12_1 = input.LA(1);

					if ((LA12_1==SEPARATOR))
					{
						alt12 = 1;
					}


					} finally { DebugExitDecision(12); }
					switch (alt12)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:98:21: SEPARATOR a2= expr
						{
						DebugLocation(98, 21);
						Match(input,SEPARATOR,Follow._SEPARATOR_in_bracket491); 
						DebugLocation(98, 34);
						PushFollow(Follow._expr_in_bracket497);
						a2=expr();
						PopFollow();

						DebugLocation(98, 41);
						a1 = Math.Min(a1, a2);

						}
						break;

					default:
						if (cnt12 >= 1)
							goto loop12;

						EarlyExitException eee12 = new EarlyExitException( 12, input );
						DebugRecognitionException(eee12);
						throw eee12;
					}
					cnt12++;
				}
				loop12:
					;

				} finally { DebugExitSubRule(12); }

				DebugLocation(98, 68);
				Match(input,13,Follow._13_in_bracket503); 
				DebugLocation(98, 72);
				value = a1;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:99:4: 'div(' a1= expr SEPARATOR a2= expr ')'
				{
				DebugLocation(99, 4);
				Match(input,38,Follow._38_in_bracket510); 
				DebugLocation(99, 14);
				PushFollow(Follow._expr_in_bracket516);
				a1=expr();
				PopFollow();

				DebugLocation(99, 21);
				Match(input,SEPARATOR,Follow._SEPARATOR_in_bracket518); 
				DebugLocation(99, 34);
				PushFollow(Follow._expr_in_bracket524);
				a2=expr();
				PopFollow();

				DebugLocation(99, 41);
				Match(input,13,Follow._13_in_bracket526); 
				DebugLocation(99, 45);
				value = (int)a1/(int)a2;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:100:4: 'mod(' a1= expr SEPARATOR a2= expr ')'
				{
				DebugLocation(100, 4);
				Match(input,47,Follow._47_in_bracket533); 
				DebugLocation(100, 14);
				PushFollow(Follow._expr_in_bracket539);
				a1=expr();
				PopFollow();

				DebugLocation(100, 21);
				Match(input,SEPARATOR,Follow._SEPARATOR_in_bracket541); 
				DebugLocation(100, 34);
				PushFollow(Follow._expr_in_bracket547);
				a2=expr();
				PopFollow();

				DebugLocation(100, 41);
				Match(input,13,Follow._13_in_bracket549); 
				DebugLocation(100, 45);
				value = (int)a1%(int)a2;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bracket", 7);
			LeaveRule("bracket", 7);
			LeaveRule_bracket();
	    }
	 	DebugLocation(101, 1);
		} finally { DebugExitRule(GrammarFileName, "bracket"); }
		return value;

	}
	// $ANTLR end "bracket"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_exponentiationFanc() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_exponentiationFanc() {}
	// $ANTLR start "exponentiationFanc"
	// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:103:1: exponentiationFanc returns [double value] : ( 'exp(' expr ')' | 'e' | 'pow(' a1= expr SEPARATOR a2= expr ')' | 'root(' a1= expr SEPARATOR a2= expr ')' | 'sqrt(' a1= expr ')' | 'sqr(' a1= expr ')' | 'log(' a1= expr SEPARATOR a2= expr ')' | 'lg(' a1= expr ')' | 'ln(' expr ')' );
	[GrammarRule("exponentiationFanc")]
	private double exponentiationFanc()
	{
		EnterRule_exponentiationFanc();
		EnterRule("exponentiationFanc", 8);
		TraceIn("exponentiationFanc", 8);
	    double value = default(double);


	    double a1 = default(double);
	    double a2 = default(double);
	    double expr12 = default(double);
	    double expr13 = default(double);

		try { DebugEnterRule(GrammarFileName, "exponentiationFanc");
		DebugLocation(103, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:104:2: ( 'exp(' expr ')' | 'e' | 'pow(' a1= expr SEPARATOR a2= expr ')' | 'root(' a1= expr SEPARATOR a2= expr ')' | 'sqrt(' a1= expr ')' | 'sqr(' a1= expr ')' | 'log(' a1= expr SEPARATOR a2= expr ')' | 'lg(' a1= expr ')' | 'ln(' expr ')' )
			int alt14=9;
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			switch (input.LA(1))
			{
			case 40:
				{
				alt14 = 1;
				}
				break;
			case 39:
				{
				alt14 = 2;
				}
				break;
			case 49:
				{
				alt14 = 3;
				}
				break;
			case 50:
				{
				alt14 = 4;
				}
				break;
			case 56:
				{
				alt14 = 5;
				}
				break;
			case 55:
				{
				alt14 = 6;
				}
				break;
			case 43:
				{
				alt14 = 7;
				}
				break;
			case 41:
				{
				alt14 = 8;
				}
				break;
			case 42:
				{
				alt14 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:104:4: 'exp(' expr ')'
				{
				DebugLocation(104, 4);
				Match(input,40,Follow._40_in_exponentiationFanc566); 
				DebugLocation(104, 11);
				PushFollow(Follow._expr_in_exponentiationFanc568);
				expr12=expr();
				PopFollow();

				DebugLocation(104, 16);
				Match(input,13,Follow._13_in_exponentiationFanc570); 
				DebugLocation(104, 20);
				value = Math.Exp(expr12);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:105:4: 'e'
				{
				DebugLocation(105, 4);
				Match(input,39,Follow._39_in_exponentiationFanc577); 
				DebugLocation(105, 8);
				value = Math.E;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:106:4: 'pow(' a1= expr SEPARATOR a2= expr ')'
				{
				DebugLocation(106, 4);
				Match(input,49,Follow._49_in_exponentiationFanc584); 
				DebugLocation(106, 14);
				PushFollow(Follow._expr_in_exponentiationFanc590);
				a1=expr();
				PopFollow();

				DebugLocation(106, 21);
				Match(input,SEPARATOR,Follow._SEPARATOR_in_exponentiationFanc592); 
				DebugLocation(106, 34);
				PushFollow(Follow._expr_in_exponentiationFanc598);
				a2=expr();
				PopFollow();

				DebugLocation(106, 41);
				Match(input,13,Follow._13_in_exponentiationFanc600); 
				DebugLocation(106, 45);
				value = Math.Pow(a1, a2);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:107:4: 'root(' a1= expr SEPARATOR a2= expr ')'
				{
				DebugLocation(107, 4);
				Match(input,50,Follow._50_in_exponentiationFanc607); 
				DebugLocation(107, 15);
				PushFollow(Follow._expr_in_exponentiationFanc613);
				a1=expr();
				PopFollow();

				DebugLocation(107, 22);
				Match(input,SEPARATOR,Follow._SEPARATOR_in_exponentiationFanc615); 
				DebugLocation(107, 35);
				PushFollow(Follow._expr_in_exponentiationFanc621);
				a2=expr();
				PopFollow();

				DebugLocation(107, 42);
				Match(input,13,Follow._13_in_exponentiationFanc623); 
				DebugLocation(107, 46);
				value = Math.Pow(a1, 1.0/a2);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:108:4: 'sqrt(' a1= expr ')'
				{
				DebugLocation(108, 4);
				Match(input,56,Follow._56_in_exponentiationFanc630); 
				DebugLocation(108, 15);
				PushFollow(Follow._expr_in_exponentiationFanc636);
				a1=expr();
				PopFollow();

				DebugLocation(108, 22);
				Match(input,13,Follow._13_in_exponentiationFanc638); 
				DebugLocation(108, 26);
				value = Math.Pow(a1, 1.0/2.0);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:109:4: 'sqr(' a1= expr ')'
				{
				DebugLocation(109, 4);
				Match(input,55,Follow._55_in_exponentiationFanc645); 
				DebugLocation(109, 14);
				PushFollow(Follow._expr_in_exponentiationFanc651);
				a1=expr();
				PopFollow();

				DebugLocation(109, 21);
				Match(input,13,Follow._13_in_exponentiationFanc653); 
				DebugLocation(109, 25);
				value = Math.Pow(a1, 2.0);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:110:4: 'log(' a1= expr SEPARATOR a2= expr ')'
				{
				DebugLocation(110, 4);
				Match(input,43,Follow._43_in_exponentiationFanc660); 
				DebugLocation(110, 14);
				PushFollow(Follow._expr_in_exponentiationFanc666);
				a1=expr();
				PopFollow();

				DebugLocation(110, 21);
				Match(input,SEPARATOR,Follow._SEPARATOR_in_exponentiationFanc668); 
				DebugLocation(110, 34);
				PushFollow(Follow._expr_in_exponentiationFanc674);
				a2=expr();
				PopFollow();

				DebugLocation(110, 41);
				Match(input,13,Follow._13_in_exponentiationFanc676); 
				DebugLocation(110, 44);
				value = Math.Log(a1, a2);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:111:4: 'lg(' a1= expr ')'
				{
				DebugLocation(111, 4);
				Match(input,41,Follow._41_in_exponentiationFanc682); 
				DebugLocation(111, 13);
				PushFollow(Follow._expr_in_exponentiationFanc688);
				a1=expr();
				PopFollow();

				DebugLocation(111, 20);
				Match(input,13,Follow._13_in_exponentiationFanc690); 
				DebugLocation(111, 24);
				value = Math.Log10(a1);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:112:4: 'ln(' expr ')'
				{
				DebugLocation(112, 4);
				Match(input,42,Follow._42_in_exponentiationFanc697); 
				DebugLocation(112, 10);
				PushFollow(Follow._expr_in_exponentiationFanc699);
				expr13=expr();
				PopFollow();

				DebugLocation(112, 15);
				Match(input,13,Follow._13_in_exponentiationFanc701); 
				DebugLocation(112, 19);
				value = Math.Log(expr13);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("exponentiationFanc", 8);
			LeaveRule("exponentiationFanc", 8);
			LeaveRule_exponentiationFanc();
	    }
	 	DebugLocation(113, 1);
		} finally { DebugExitRule(GrammarFileName, "exponentiationFanc"); }
		return value;

	}
	// $ANTLR end "exponentiationFanc"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_trigonometryFanc() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_trigonometryFanc() {}
	// $ANTLR start "trigonometryFanc"
	// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:115:1: trigonometryFanc returns [double value] : ( 'pi' | standardTrigonometryFanc | hyperbolicTrigonometryFanc | arcTrigonometryFanc );
	[GrammarRule("trigonometryFanc")]
	private double trigonometryFanc()
	{
		EnterRule_trigonometryFanc();
		EnterRule("trigonometryFanc", 9);
		TraceIn("trigonometryFanc", 9);
	    double value = default(double);


	    double standardTrigonometryFanc14 = default(double);
	    double hyperbolicTrigonometryFanc15 = default(double);
	    double arcTrigonometryFanc16 = default(double);

		try { DebugEnterRule(GrammarFileName, "trigonometryFanc");
		DebugLocation(115, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:116:2: ( 'pi' | standardTrigonometryFanc | hyperbolicTrigonometryFanc | arcTrigonometryFanc )
			int alt15=4;
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			switch (input.LA(1))
			{
			case 48:
				{
				alt15 = 1;
				}
				break;
			case 32:
			case 33:
			case 35:
			case 51:
			case 54:
			case 57:
				{
				alt15 = 2;
				}
				break;
			case 31:
			case 34:
			case 36:
			case 52:
			case 53:
			case 58:
				{
				alt15 = 3;
				}
				break;
			case 26:
			case 27:
			case 28:
			case 29:
			case 30:
				{
				alt15 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:116:4: 'pi'
				{
				DebugLocation(116, 4);
				Match(input,48,Follow._48_in_trigonometryFanc719); 
				DebugLocation(116, 10);
				value = Math.PI;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:117:4: standardTrigonometryFanc
				{
				DebugLocation(117, 4);
				PushFollow(Follow._standardTrigonometryFanc_in_trigonometryFanc727);
				standardTrigonometryFanc14=standardTrigonometryFanc();
				PopFollow();

				DebugLocation(117, 29);
				value = standardTrigonometryFanc14;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:118:4: hyperbolicTrigonometryFanc
				{
				DebugLocation(118, 4);
				PushFollow(Follow._hyperbolicTrigonometryFanc_in_trigonometryFanc734);
				hyperbolicTrigonometryFanc15=hyperbolicTrigonometryFanc();
				PopFollow();

				DebugLocation(118, 31);
				value = hyperbolicTrigonometryFanc15;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:119:4: arcTrigonometryFanc
				{
				DebugLocation(119, 4);
				PushFollow(Follow._arcTrigonometryFanc_in_trigonometryFanc741);
				arcTrigonometryFanc16=arcTrigonometryFanc();
				PopFollow();

				DebugLocation(119, 24);
				value = arcTrigonometryFanc16;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("trigonometryFanc", 9);
			LeaveRule("trigonometryFanc", 9);
			LeaveRule_trigonometryFanc();
	    }
	 	DebugLocation(120, 1);
		} finally { DebugExitRule(GrammarFileName, "trigonometryFanc"); }
		return value;

	}
	// $ANTLR end "trigonometryFanc"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_standardTrigonometryFanc() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_standardTrigonometryFanc() {}
	// $ANTLR start "standardTrigonometryFanc"
	// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:122:1: standardTrigonometryFanc returns [double value] : ( 'sin(' a1= expr ')' | 'cos(' a1= expr ')' | 'tg(' a1= expr ')' | 'ctg(' a1= expr ')' | 'sec(' a1= expr ')' | 'cosec(' a1= expr ')' );
	[GrammarRule("standardTrigonometryFanc")]
	private double standardTrigonometryFanc()
	{
		EnterRule_standardTrigonometryFanc();
		EnterRule("standardTrigonometryFanc", 10);
		TraceIn("standardTrigonometryFanc", 10);
	    double value = default(double);


	    double a1 = default(double);

		try { DebugEnterRule(GrammarFileName, "standardTrigonometryFanc");
		DebugLocation(122, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:123:2: ( 'sin(' a1= expr ')' | 'cos(' a1= expr ')' | 'tg(' a1= expr ')' | 'ctg(' a1= expr ')' | 'sec(' a1= expr ')' | 'cosec(' a1= expr ')' )
			int alt16=6;
			try { DebugEnterDecision(16, decisionCanBacktrack[16]);
			switch (input.LA(1))
			{
			case 54:
				{
				alt16 = 1;
				}
				break;
			case 32:
				{
				alt16 = 2;
				}
				break;
			case 57:
				{
				alt16 = 3;
				}
				break;
			case 35:
				{
				alt16 = 4;
				}
				break;
			case 51:
				{
				alt16 = 5;
				}
				break;
			case 33:
				{
				alt16 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:123:4: 'sin(' a1= expr ')'
				{
				DebugLocation(123, 4);
				Match(input,54,Follow._54_in_standardTrigonometryFanc757); 
				DebugLocation(123, 14);
				PushFollow(Follow._expr_in_standardTrigonometryFanc763);
				a1=expr();
				PopFollow();

				DebugLocation(123, 21);
				Match(input,13,Follow._13_in_standardTrigonometryFanc765); 
				DebugLocation(123, 25);
				value = Math.Sin(a1);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:124:4: 'cos(' a1= expr ')'
				{
				DebugLocation(124, 4);
				Match(input,32,Follow._32_in_standardTrigonometryFanc772); 
				DebugLocation(124, 14);
				PushFollow(Follow._expr_in_standardTrigonometryFanc778);
				a1=expr();
				PopFollow();

				DebugLocation(124, 21);
				Match(input,13,Follow._13_in_standardTrigonometryFanc780); 
				DebugLocation(124, 25);
				value = Math.Cos(a1);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:125:4: 'tg(' a1= expr ')'
				{
				DebugLocation(125, 4);
				Match(input,57,Follow._57_in_standardTrigonometryFanc787); 
				DebugLocation(125, 13);
				PushFollow(Follow._expr_in_standardTrigonometryFanc793);
				a1=expr();
				PopFollow();

				DebugLocation(125, 20);
				Match(input,13,Follow._13_in_standardTrigonometryFanc795); 
				DebugLocation(125, 24);
				value = Math.Tan(a1);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:126:4: 'ctg(' a1= expr ')'
				{
				DebugLocation(126, 4);
				Match(input,35,Follow._35_in_standardTrigonometryFanc802); 
				DebugLocation(126, 14);
				PushFollow(Follow._expr_in_standardTrigonometryFanc808);
				a1=expr();
				PopFollow();

				DebugLocation(126, 21);
				Match(input,13,Follow._13_in_standardTrigonometryFanc810); 
				DebugLocation(126, 25);
				value = 1.0/Math.Tan(a1);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:127:4: 'sec(' a1= expr ')'
				{
				DebugLocation(127, 4);
				Match(input,51,Follow._51_in_standardTrigonometryFanc817); 
				DebugLocation(127, 14);
				PushFollow(Follow._expr_in_standardTrigonometryFanc823);
				a1=expr();
				PopFollow();

				DebugLocation(127, 21);
				Match(input,13,Follow._13_in_standardTrigonometryFanc825); 
				DebugLocation(127, 25);
				value = 1.0/Math.Cos(a1);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:128:4: 'cosec(' a1= expr ')'
				{
				DebugLocation(128, 4);
				Match(input,33,Follow._33_in_standardTrigonometryFanc832); 
				DebugLocation(128, 16);
				PushFollow(Follow._expr_in_standardTrigonometryFanc838);
				a1=expr();
				PopFollow();

				DebugLocation(128, 23);
				Match(input,13,Follow._13_in_standardTrigonometryFanc840); 
				DebugLocation(128, 27);
				value = 1.0/Math.Sin(a1);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("standardTrigonometryFanc", 10);
			LeaveRule("standardTrigonometryFanc", 10);
			LeaveRule_standardTrigonometryFanc();
	    }
	 	DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "standardTrigonometryFanc"); }
		return value;

	}
	// $ANTLR end "standardTrigonometryFanc"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_hyperbolicTrigonometryFanc() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_hyperbolicTrigonometryFanc() {}
	// $ANTLR start "hyperbolicTrigonometryFanc"
	// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:131:1: hyperbolicTrigonometryFanc returns [double value] : ( 'sh(' a1= expr ')' | 'ch(' a1= expr ')' | 'th(' a1= expr ')' | 'cth(' a1= expr ')' | 'sech(' a1= expr ')' | 'csch(' a1= expr ')' );
	[GrammarRule("hyperbolicTrigonometryFanc")]
	private double hyperbolicTrigonometryFanc()
	{
		EnterRule_hyperbolicTrigonometryFanc();
		EnterRule("hyperbolicTrigonometryFanc", 11);
		TraceIn("hyperbolicTrigonometryFanc", 11);
	    double value = default(double);


	    double a1 = default(double);

		try { DebugEnterRule(GrammarFileName, "hyperbolicTrigonometryFanc");
		DebugLocation(131, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:132:2: ( 'sh(' a1= expr ')' | 'ch(' a1= expr ')' | 'th(' a1= expr ')' | 'cth(' a1= expr ')' | 'sech(' a1= expr ')' | 'csch(' a1= expr ')' )
			int alt17=6;
			try { DebugEnterDecision(17, decisionCanBacktrack[17]);
			switch (input.LA(1))
			{
			case 53:
				{
				alt17 = 1;
				}
				break;
			case 31:
				{
				alt17 = 2;
				}
				break;
			case 58:
				{
				alt17 = 3;
				}
				break;
			case 36:
				{
				alt17 = 4;
				}
				break;
			case 52:
				{
				alt17 = 5;
				}
				break;
			case 34:
				{
				alt17 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:132:4: 'sh(' a1= expr ')'
				{
				DebugLocation(132, 4);
				Match(input,53,Follow._53_in_hyperbolicTrigonometryFanc856); 
				DebugLocation(132, 13);
				PushFollow(Follow._expr_in_hyperbolicTrigonometryFanc862);
				a1=expr();
				PopFollow();

				DebugLocation(132, 20);
				Match(input,13,Follow._13_in_hyperbolicTrigonometryFanc864); 
				DebugLocation(132, 24);
				value = Math.Sinh(a1);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:133:4: 'ch(' a1= expr ')'
				{
				DebugLocation(133, 4);
				Match(input,31,Follow._31_in_hyperbolicTrigonometryFanc871); 
				DebugLocation(133, 13);
				PushFollow(Follow._expr_in_hyperbolicTrigonometryFanc877);
				a1=expr();
				PopFollow();

				DebugLocation(133, 20);
				Match(input,13,Follow._13_in_hyperbolicTrigonometryFanc879); 
				DebugLocation(133, 24);
				value = Math.Cosh(a1);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:134:4: 'th(' a1= expr ')'
				{
				DebugLocation(134, 4);
				Match(input,58,Follow._58_in_hyperbolicTrigonometryFanc886); 
				DebugLocation(134, 13);
				PushFollow(Follow._expr_in_hyperbolicTrigonometryFanc892);
				a1=expr();
				PopFollow();

				DebugLocation(134, 20);
				Match(input,13,Follow._13_in_hyperbolicTrigonometryFanc894); 
				DebugLocation(134, 24);
				value = Math.Tanh(a1);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:135:4: 'cth(' a1= expr ')'
				{
				DebugLocation(135, 4);
				Match(input,36,Follow._36_in_hyperbolicTrigonometryFanc901); 
				DebugLocation(135, 14);
				PushFollow(Follow._expr_in_hyperbolicTrigonometryFanc907);
				a1=expr();
				PopFollow();

				DebugLocation(135, 21);
				Match(input,13,Follow._13_in_hyperbolicTrigonometryFanc909); 
				DebugLocation(135, 25);
				value = 1.0/Math.Tanh(a1);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:136:4: 'sech(' a1= expr ')'
				{
				DebugLocation(136, 4);
				Match(input,52,Follow._52_in_hyperbolicTrigonometryFanc916); 
				DebugLocation(136, 15);
				PushFollow(Follow._expr_in_hyperbolicTrigonometryFanc922);
				a1=expr();
				PopFollow();

				DebugLocation(136, 22);
				Match(input,13,Follow._13_in_hyperbolicTrigonometryFanc924); 
				DebugLocation(136, 26);
				value = 1.0/Math.Cosh(a1);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:137:4: 'csch(' a1= expr ')'
				{
				DebugLocation(137, 4);
				Match(input,34,Follow._34_in_hyperbolicTrigonometryFanc931); 
				DebugLocation(137, 15);
				PushFollow(Follow._expr_in_hyperbolicTrigonometryFanc937);
				a1=expr();
				PopFollow();

				DebugLocation(137, 22);
				Match(input,13,Follow._13_in_hyperbolicTrigonometryFanc939); 
				DebugLocation(137, 26);
				value = 1.0/Math.Sinh(a1);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("hyperbolicTrigonometryFanc", 11);
			LeaveRule("hyperbolicTrigonometryFanc", 11);
			LeaveRule_hyperbolicTrigonometryFanc();
	    }
	 	DebugLocation(138, 1);
		} finally { DebugExitRule(GrammarFileName, "hyperbolicTrigonometryFanc"); }
		return value;

	}
	// $ANTLR end "hyperbolicTrigonometryFanc"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_arcTrigonometryFanc() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_arcTrigonometryFanc() {}
	// $ANTLR start "arcTrigonometryFanc"
	// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:140:1: arcTrigonometryFanc returns [double value] : ( 'asin(' a1= expr ')' | 'acos(' a1= expr ')' | 'atg2(' a1= expr SEPARATOR a2= expr ')' | 'atg(' a1= expr ')' | 'actg(' a1= expr ')' );
	[GrammarRule("arcTrigonometryFanc")]
	private double arcTrigonometryFanc()
	{
		EnterRule_arcTrigonometryFanc();
		EnterRule("arcTrigonometryFanc", 12);
		TraceIn("arcTrigonometryFanc", 12);
	    double value = default(double);


	    double a1 = default(double);
	    double a2 = default(double);

		try { DebugEnterRule(GrammarFileName, "arcTrigonometryFanc");
		DebugLocation(140, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:141:2: ( 'asin(' a1= expr ')' | 'acos(' a1= expr ')' | 'atg2(' a1= expr SEPARATOR a2= expr ')' | 'atg(' a1= expr ')' | 'actg(' a1= expr ')' )
			int alt18=5;
			try { DebugEnterDecision(18, decisionCanBacktrack[18]);
			switch (input.LA(1))
			{
			case 28:
				{
				alt18 = 1;
				}
				break;
			case 26:
				{
				alt18 = 2;
				}
				break;
			case 30:
				{
				alt18 = 3;
				}
				break;
			case 29:
				{
				alt18 = 4;
				}
				break;
			case 27:
				{
				alt18 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:141:4: 'asin(' a1= expr ')'
				{
				DebugLocation(141, 4);
				Match(input,28,Follow._28_in_arcTrigonometryFanc956); 
				DebugLocation(141, 15);
				PushFollow(Follow._expr_in_arcTrigonometryFanc962);
				a1=expr();
				PopFollow();

				DebugLocation(141, 22);
				Match(input,13,Follow._13_in_arcTrigonometryFanc964); 
				DebugLocation(141, 26);
				value = Math.Asin(a1);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:142:4: 'acos(' a1= expr ')'
				{
				DebugLocation(142, 4);
				Match(input,26,Follow._26_in_arcTrigonometryFanc971); 
				DebugLocation(142, 15);
				PushFollow(Follow._expr_in_arcTrigonometryFanc977);
				a1=expr();
				PopFollow();

				DebugLocation(142, 22);
				Match(input,13,Follow._13_in_arcTrigonometryFanc979); 
				DebugLocation(142, 26);
				value = Math.Acos(a1);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:143:4: 'atg2(' a1= expr SEPARATOR a2= expr ')'
				{
				DebugLocation(143, 4);
				Match(input,30,Follow._30_in_arcTrigonometryFanc986); 
				DebugLocation(143, 16);
				PushFollow(Follow._expr_in_arcTrigonometryFanc993);
				a1=expr();
				PopFollow();

				DebugLocation(143, 23);
				Match(input,SEPARATOR,Follow._SEPARATOR_in_arcTrigonometryFanc995); 
				DebugLocation(143, 36);
				PushFollow(Follow._expr_in_arcTrigonometryFanc1001);
				a2=expr();
				PopFollow();

				DebugLocation(143, 44);
				Match(input,13,Follow._13_in_arcTrigonometryFanc1004); 
				DebugLocation(143, 48);
				value = Math.Atan2(a1, a2);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:144:4: 'atg(' a1= expr ')'
				{
				DebugLocation(144, 4);
				Match(input,29,Follow._29_in_arcTrigonometryFanc1011); 
				DebugLocation(144, 14);
				PushFollow(Follow._expr_in_arcTrigonometryFanc1017);
				a1=expr();
				PopFollow();

				DebugLocation(144, 21);
				Match(input,13,Follow._13_in_arcTrigonometryFanc1019); 
				DebugLocation(144, 25);
				value = Math.Atan(a1);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfArithmetic.g:145:4: 'actg(' a1= expr ')'
				{
				DebugLocation(145, 4);
				Match(input,27,Follow._27_in_arcTrigonometryFanc1026); 
				DebugLocation(145, 15);
				PushFollow(Follow._expr_in_arcTrigonometryFanc1032);
				a1=expr();
				PopFollow();

				DebugLocation(145, 22);
				Match(input,13,Follow._13_in_arcTrigonometryFanc1034); 
				DebugLocation(145, 26);
				value = 1.0/Math.Atan(a1);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arcTrigonometryFanc", 12);
			LeaveRule("arcTrigonometryFanc", 12);
			LeaveRule_arcTrigonometryFanc();
	    }
	 	DebugLocation(146, 1);
		} finally { DebugExitRule(GrammarFileName, "arcTrigonometryFanc"); }
		return value;

	}
	// $ANTLR end "arcTrigonometryFanc"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _ID_in_graph55 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _20_in_graph57 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_graph63 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _NEWLINE_in_graph65 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_graph77 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _NEWLINE_in_graph81 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_graph86 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_calc106 = new BitSet(new ulong[]{0xFFFBFDFFE4111A2UL});
		public static readonly BitSet _expr_in_statement124 = new BitSet(new ulong[]{0x100100UL});
		public static readonly BitSet _20_in_statement128 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _NEWLINE_in_statement133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_statement140 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _20_in_statement142 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_statement148 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _NEWLINE_in_statement152 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_statement162 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _16_in_expr179 = new BitSet(new ulong[]{0xFFFBFDFFE4010A0UL});
		public static readonly BitSet _multExpression_in_expr182 = new BitSet(new ulong[]{0x18002UL});
		public static readonly BitSet _multExpression_in_expr193 = new BitSet(new ulong[]{0x18002UL});
		public static readonly BitSet _15_in_expr200 = new BitSet(new ulong[]{0xFFFBFDFFE4010A0UL});
		public static readonly BitSet _multExpression_in_expr204 = new BitSet(new ulong[]{0x18002UL});
		public static readonly BitSet _16_in_expr210 = new BitSet(new ulong[]{0xFFFBFDFFE4010A0UL});
		public static readonly BitSet _multExpression_in_expr214 = new BitSet(new ulong[]{0x18002UL});
		public static readonly BitSet _fanc_in_multExpression234 = new BitSet(new ulong[]{0x4020012E4002UL});
		public static readonly BitSet _24_in_multExpression240 = new BitSet(new ulong[]{0xFFFBFDFFE4010A0UL});
		public static readonly BitSet _fanc_in_multExpression244 = new BitSet(new ulong[]{0x4020012E4002UL});
		public static readonly BitSet _14_in_multExpression251 = new BitSet(new ulong[]{0xFFFBFDFFE4010A0UL});
		public static readonly BitSet _fanc_in_multExpression255 = new BitSet(new ulong[]{0x4020012E4002UL});
		public static readonly BitSet _set_in_multExpression262 = new BitSet(new ulong[]{0xFFFBFDFFE4010A0UL});
		public static readonly BitSet _fanc_in_multExpression270 = new BitSet(new ulong[]{0x4020012E4002UL});
		public static readonly BitSet _37_in_multExpression278 = new BitSet(new ulong[]{0xFFFBFDFFE4010A0UL});
		public static readonly BitSet _fanc_in_multExpression284 = new BitSet(new ulong[]{0x4020012E4002UL});
		public static readonly BitSet _46_in_multExpression292 = new BitSet(new ulong[]{0xFFFBFDFFE4010A0UL});
		public static readonly BitSet _fanc_in_multExpression298 = new BitSet(new ulong[]{0x4020012E4002UL});
		public static readonly BitSet _21_in_multExpression306 = new BitSet(new ulong[]{0xFFFBFDFFE4010A0UL});
		public static readonly BitSet _fanc_in_multExpression312 = new BitSet(new ulong[]{0x4020012E4002UL});
		public static readonly BitSet _19_in_multExpression320 = new BitSet(new ulong[]{0xFFFBFDFFE4010A0UL});
		public static readonly BitSet _fanc_in_multExpression326 = new BitSet(new ulong[]{0x4020012E4002UL});
		public static readonly BitSet _exponentiationFanc_in_fanc347 = new BitSet(new ulong[]{0xC02UL});
		public static readonly BitSet _trigonometryFanc_in_fanc354 = new BitSet(new ulong[]{0xC02UL});
		public static readonly BitSet _bracket_in_fanc361 = new BitSet(new ulong[]{0xC02UL});
		public static readonly BitSet _10_in_fanc368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _11_in_fanc375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_bracket394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOAT_in_bracket401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _12_in_bracket408 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_bracket414 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_bracket416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_bracket418 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_bracket424 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_bracket426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _22_in_bracket434 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_bracket436 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _23_in_bracket438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _25_in_bracket445 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_bracket447 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_bracket449 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _44_in_bracket456 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_bracket461 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _SEPARATOR_in_bracket464 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_bracket470 = new BitSet(new ulong[]{0x2200UL});
		public static readonly BitSet _13_in_bracket476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _45_in_bracket483 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_bracket488 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _SEPARATOR_in_bracket491 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_bracket497 = new BitSet(new ulong[]{0x2200UL});
		public static readonly BitSet _13_in_bracket503 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _38_in_bracket510 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_bracket516 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _SEPARATOR_in_bracket518 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_bracket524 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_bracket526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _47_in_bracket533 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_bracket539 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _SEPARATOR_in_bracket541 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_bracket547 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_bracket549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _40_in_exponentiationFanc566 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_exponentiationFanc568 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_exponentiationFanc570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _39_in_exponentiationFanc577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _49_in_exponentiationFanc584 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_exponentiationFanc590 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _SEPARATOR_in_exponentiationFanc592 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_exponentiationFanc598 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_exponentiationFanc600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _50_in_exponentiationFanc607 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_exponentiationFanc613 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _SEPARATOR_in_exponentiationFanc615 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_exponentiationFanc621 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_exponentiationFanc623 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _56_in_exponentiationFanc630 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_exponentiationFanc636 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_exponentiationFanc638 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _55_in_exponentiationFanc645 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_exponentiationFanc651 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_exponentiationFanc653 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _43_in_exponentiationFanc660 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_exponentiationFanc666 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _SEPARATOR_in_exponentiationFanc668 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_exponentiationFanc674 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_exponentiationFanc676 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _41_in_exponentiationFanc682 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_exponentiationFanc688 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_exponentiationFanc690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _42_in_exponentiationFanc697 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_exponentiationFanc699 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_exponentiationFanc701 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _48_in_trigonometryFanc719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _standardTrigonometryFanc_in_trigonometryFanc727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _hyperbolicTrigonometryFanc_in_trigonometryFanc734 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arcTrigonometryFanc_in_trigonometryFanc741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _54_in_standardTrigonometryFanc757 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_standardTrigonometryFanc763 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_standardTrigonometryFanc765 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_standardTrigonometryFanc772 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_standardTrigonometryFanc778 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_standardTrigonometryFanc780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _57_in_standardTrigonometryFanc787 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_standardTrigonometryFanc793 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_standardTrigonometryFanc795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _35_in_standardTrigonometryFanc802 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_standardTrigonometryFanc808 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_standardTrigonometryFanc810 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_standardTrigonometryFanc817 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_standardTrigonometryFanc823 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_standardTrigonometryFanc825 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _33_in_standardTrigonometryFanc832 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_standardTrigonometryFanc838 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_standardTrigonometryFanc840 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_hyperbolicTrigonometryFanc856 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_hyperbolicTrigonometryFanc862 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_hyperbolicTrigonometryFanc864 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _31_in_hyperbolicTrigonometryFanc871 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_hyperbolicTrigonometryFanc877 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_hyperbolicTrigonometryFanc879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _58_in_hyperbolicTrigonometryFanc886 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_hyperbolicTrigonometryFanc892 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_hyperbolicTrigonometryFanc894 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _36_in_hyperbolicTrigonometryFanc901 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_hyperbolicTrigonometryFanc907 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_hyperbolicTrigonometryFanc909 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _52_in_hyperbolicTrigonometryFanc916 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_hyperbolicTrigonometryFanc922 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_hyperbolicTrigonometryFanc924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _34_in_hyperbolicTrigonometryFanc931 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_hyperbolicTrigonometryFanc937 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_hyperbolicTrigonometryFanc939 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _28_in_arcTrigonometryFanc956 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_arcTrigonometryFanc962 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_arcTrigonometryFanc964 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _26_in_arcTrigonometryFanc971 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_arcTrigonometryFanc977 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_arcTrigonometryFanc979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_arcTrigonometryFanc986 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_arcTrigonometryFanc993 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _SEPARATOR_in_arcTrigonometryFanc995 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_arcTrigonometryFanc1001 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_arcTrigonometryFanc1004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _29_in_arcTrigonometryFanc1011 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_arcTrigonometryFanc1017 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_arcTrigonometryFanc1019 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _27_in_arcTrigonometryFanc1026 = new BitSet(new ulong[]{0xFFFBFDFFE4110A0UL});
		public static readonly BitSet _expr_in_arcTrigonometryFanc1032 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_arcTrigonometryFanc1034 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Generated 
