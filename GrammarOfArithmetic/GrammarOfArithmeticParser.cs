//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g 2016-12-04 14:57:30

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace  Generated 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class GrammarOfArithmeticParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "EXPONENT", "FLOAT", "ID", "INT", "NEWLINE", "'('", "')'", "'*'", "'+'", "'-'", "'/'", "'='"
	};
	public const int EOF=-1;
	public const int T__9=9;
	public const int T__10=10;
	public const int T__11=11;
	public const int T__12=12;
	public const int T__13=13;
	public const int T__14=14;
	public const int T__15=15;
	public const int EXPONENT=4;
	public const int FLOAT=5;
	public const int ID=6;
	public const int INT=7;
	public const int NEWLINE=8;

	#if ANTLR_DEBUG
	private static readonly bool[] decisionCanBacktrack =
		new bool[]
		{
			false, // invalid decision
			false, false, false, false, false
		};
	#else
	private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public GrammarOfArithmeticParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public GrammarOfArithmeticParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return GrammarOfArithmeticParser.tokenNames; } }
	public override string GrammarFileName { get { return "D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_calc() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_calc() {}
	// $ANTLR start "calc"
	// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:10:8: public calc : ( statement )+ ;
	[GrammarRule("calc")]
	public void calc()
	{
		EnterRule_calc();
		EnterRule("calc", 1);
		TraceIn("calc", 1);
		try { DebugEnterRule(GrammarFileName, "calc");
		DebugLocation(10, 1);
		try
		{
			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:11:2: ( ( statement )+ )
			DebugEnterAlt(1);
			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:11:4: ( statement )+
			{
			DebugLocation(11, 4);
			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:11:4: ( statement )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, decisionCanBacktrack[1]);
				int LA1_1 = input.LA(1);

				if (((LA1_1>=ID && LA1_1<=9)))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:11:4: statement
					{
					DebugLocation(11, 4);
					PushFollow(Follow._statement_in_calc44);
					statement();
					PopFollow();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("calc", 1);
			LeaveRule("calc", 1);
			LeaveRule_calc();
	    }
	 	DebugLocation(12, 1);
		} finally { DebugExitRule(GrammarFileName, "calc"); }
		return;

	}
	// $ANTLR end "calc"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_statement() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_statement() {}
	// $ANTLR start "statement"
	// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:14:1: statement : ( expr NEWLINE | ID '=' expr NEWLINE | NEWLINE );
	[GrammarRule("statement")]
	private void statement()
	{
		EnterRule_statement();
		EnterRule("statement", 2);
		TraceIn("statement", 2);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(14, 1);
		try
		{
			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:15:2: ( expr NEWLINE | ID '=' expr NEWLINE | NEWLINE )
			int alt2=3;
			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA2_2 = input.LA(2);

				if ((LA2_2==15))
				{
					alt2 = 2;
				}
				else if ((LA2_2==NEWLINE||(LA2_2>=11 && LA2_2<=14)))
				{
					alt2 = 1;
				}

				else
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}

				}
				break;
			case INT:
			case 9:
				{
				alt2 = 1;
				}
				break;
			case NEWLINE:
				{
				alt2 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:15:4: expr NEWLINE
				{
				DebugLocation(15, 4);
				PushFollow(Follow._expr_in_statement56);
				expr();
				PopFollow();

				DebugLocation(15, 9);
				Match(input,NEWLINE,Follow._NEWLINE_in_statement58); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:16:4: ID '=' expr NEWLINE
				{
				DebugLocation(16, 4);
				Match(input,ID,Follow._ID_in_statement63); 
				DebugLocation(16, 7);
				Match(input,15,Follow._15_in_statement65); 
				DebugLocation(16, 11);
				PushFollow(Follow._expr_in_statement67);
				expr();
				PopFollow();

				DebugLocation(16, 16);
				Match(input,NEWLINE,Follow._NEWLINE_in_statement69); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:17:4: NEWLINE
				{
				DebugLocation(17, 4);
				Match(input,NEWLINE,Follow._NEWLINE_in_statement74); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 2);
			LeaveRule("statement", 2);
			LeaveRule_statement();
	    }
	 	DebugLocation(18, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return;

	}
	// $ANTLR end "statement"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expr() {}
	// $ANTLR start "expr"
	// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:20:1: expr : multExpression ( '+' multExpression | '-' multExpression )* ;
	[GrammarRule("expr")]
	private void expr()
	{
		EnterRule_expr();
		EnterRule("expr", 3);
		TraceIn("expr", 3);
		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(20, 1);
		try
		{
			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:21:2: ( multExpression ( '+' multExpression | '-' multExpression )* )
			DebugEnterAlt(1);
			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:21:4: multExpression ( '+' multExpression | '-' multExpression )*
			{
			DebugLocation(21, 4);
			PushFollow(Follow._multExpression_in_expr86);
			multExpression();
			PopFollow();

			DebugLocation(22, 2);
			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:22:2: ( '+' multExpression | '-' multExpression )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=3;
				try { DebugEnterDecision(3, decisionCanBacktrack[3]);
				int LA3_1 = input.LA(1);

				if ((LA3_1==12))
				{
					alt3 = 1;
				}
				else if ((LA3_1==13))
				{
					alt3 = 2;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:22:3: '+' multExpression
					{
					DebugLocation(22, 3);
					Match(input,12,Follow._12_in_expr91); 
					DebugLocation(22, 7);
					PushFollow(Follow._multExpression_in_expr93);
					multExpression();
					PopFollow();


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:23:3: '-' multExpression
					{
					DebugLocation(23, 3);
					Match(input,13,Follow._13_in_expr98); 
					DebugLocation(23, 7);
					PushFollow(Follow._multExpression_in_expr100);
					multExpression();
					PopFollow();


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 3);
			LeaveRule("expr", 3);
			LeaveRule_expr();
	    }
	 	DebugLocation(24, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return;

	}
	// $ANTLR end "expr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_multExpression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_multExpression() {}
	// $ANTLR start "multExpression"
	// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:26:1: multExpression : a1= atom ( '*' a2= atom | '/' a2= atom )* ;
	[GrammarRule("multExpression")]
	private void multExpression()
	{
		EnterRule_multExpression();
		EnterRule("multExpression", 4);
		TraceIn("multExpression", 4);
		try { DebugEnterRule(GrammarFileName, "multExpression");
		DebugLocation(26, 1);
		try
		{
			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:27:2: (a1= atom ( '*' a2= atom | '/' a2= atom )* )
			DebugEnterAlt(1);
			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:27:4: a1= atom ( '*' a2= atom | '/' a2= atom )*
			{
			DebugLocation(27, 6);
			PushFollow(Follow._atom_in_multExpression115);
			atom();
			PopFollow();

			DebugLocation(27, 12);
			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:27:12: ( '*' a2= atom | '/' a2= atom )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=3;
				try { DebugEnterDecision(4, decisionCanBacktrack[4]);
				int LA4_1 = input.LA(1);

				if ((LA4_1==11))
				{
					alt4 = 1;
				}
				else if ((LA4_1==14))
				{
					alt4 = 2;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:27:13: '*' a2= atom
					{
					DebugLocation(27, 13);
					Match(input,11,Follow._11_in_multExpression118); 
					DebugLocation(27, 19);
					PushFollow(Follow._atom_in_multExpression122);
					atom();
					PopFollow();


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:27:27: '/' a2= atom
					{
					DebugLocation(27, 27);
					Match(input,14,Follow._14_in_multExpression126); 
					DebugLocation(27, 33);
					PushFollow(Follow._atom_in_multExpression130);
					atom();
					PopFollow();


					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("multExpression", 4);
			LeaveRule("multExpression", 4);
			LeaveRule_multExpression();
	    }
	 	DebugLocation(28, 1);
		} finally { DebugExitRule(GrammarFileName, "multExpression"); }
		return;

	}
	// $ANTLR end "multExpression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_atom() {}
	// $ANTLR start "atom"
	// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:30:1: atom : ( ID | INT | '(' expr ')' );
	[GrammarRule("atom")]
	private void atom()
	{
		EnterRule_atom();
		EnterRule("atom", 5);
		TraceIn("atom", 5);
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(30, 1);
		try
		{
			// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:31:2: ( ID | INT | '(' expr ')' )
			int alt5=3;
			try { DebugEnterDecision(5, decisionCanBacktrack[5]);
			switch (input.LA(1))
			{
			case ID:
				{
				alt5 = 1;
				}
				break;
			case INT:
				{
				alt5 = 2;
				}
				break;
			case 9:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:31:4: ID
				{
				DebugLocation(31, 4);
				Match(input,ID,Follow._ID_in_atom144); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:32:4: INT
				{
				DebugLocation(32, 4);
				Match(input,INT,Follow._INT_in_atom149); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\project\\C#\\Calculator\\GrammarOfArithmetic.g:33:4: '(' expr ')'
				{
				DebugLocation(33, 4);
				Match(input,9,Follow._9_in_atom154); 
				DebugLocation(33, 8);
				PushFollow(Follow._expr_in_atom156);
				expr();
				PopFollow();

				DebugLocation(33, 13);
				Match(input,10,Follow._10_in_atom158); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("atom", 5);
			LeaveRule("atom", 5);
			LeaveRule_atom();
	    }
	 	DebugLocation(34, 1);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return;

	}
	// $ANTLR end "atom"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _statement_in_calc44 = new BitSet(new ulong[]{0x3C2UL});
		public static readonly BitSet _expr_in_statement56 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _NEWLINE_in_statement58 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_statement63 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_statement65 = new BitSet(new ulong[]{0x2C0UL});
		public static readonly BitSet _expr_in_statement67 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _NEWLINE_in_statement69 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_statement74 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _multExpression_in_expr86 = new BitSet(new ulong[]{0x3002UL});
		public static readonly BitSet _12_in_expr91 = new BitSet(new ulong[]{0x2C0UL});
		public static readonly BitSet _multExpression_in_expr93 = new BitSet(new ulong[]{0x3002UL});
		public static readonly BitSet _13_in_expr98 = new BitSet(new ulong[]{0x2C0UL});
		public static readonly BitSet _multExpression_in_expr100 = new BitSet(new ulong[]{0x3002UL});
		public static readonly BitSet _atom_in_multExpression115 = new BitSet(new ulong[]{0x4802UL});
		public static readonly BitSet _11_in_multExpression118 = new BitSet(new ulong[]{0x2C0UL});
		public static readonly BitSet _atom_in_multExpression122 = new BitSet(new ulong[]{0x4802UL});
		public static readonly BitSet _14_in_multExpression126 = new BitSet(new ulong[]{0x2C0UL});
		public static readonly BitSet _atom_in_multExpression130 = new BitSet(new ulong[]{0x4802UL});
		public static readonly BitSet _ID_in_atom144 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_atom149 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _9_in_atom154 = new BitSet(new ulong[]{0x2C0UL});
		public static readonly BitSet _expr_in_atom156 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _10_in_atom158 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Generated 
