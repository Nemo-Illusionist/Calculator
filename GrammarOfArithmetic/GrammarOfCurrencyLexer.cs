//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g 2016-12-08 13:56:45

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace  Generated 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class GrammarOfCurrencyLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__10=10;
	public const int T__11=11;
	public const int T__12=12;
	public const int T__13=13;
	public const int T__14=14;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int CURRENCY=4;
	public const int EXPONENT=5;
	public const int FLOAT=6;
	public const int ID=7;
	public const int NEWLINE=8;
	public const int SEPARATOR=9;

    // delegates
    // delegators

	public GrammarOfCurrencyLexer()
	{
		OnCreated();
	}

	public GrammarOfCurrencyLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public GrammarOfCurrencyLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__10() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__10() {}

    // $ANTLR start "T__10"
    [GrammarRule("T__10")]
    private void mT__10()
    {
    	EnterRule_T__10();
    	EnterRule("T__10", 1);
    	TraceIn("T__10", 1);
    		try
    		{
    		int _type = T__10;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:9:7: ( '(' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:9:9: '('
    		{
    		DebugLocation(9, 9);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__10", 1);
    		LeaveRule("T__10", 1);
    		LeaveRule_T__10();
        }
    }
    // $ANTLR end "T__10"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__11() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__11() {}

    // $ANTLR start "T__11"
    [GrammarRule("T__11")]
    private void mT__11()
    {
    	EnterRule_T__11();
    	EnterRule("T__11", 2);
    	TraceIn("T__11", 2);
    		try
    		{
    		int _type = T__11;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:10:7: ( ')' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:10:9: ')'
    		{
    		DebugLocation(10, 9);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__11", 2);
    		LeaveRule("T__11", 2);
    		LeaveRule_T__11();
        }
    }
    // $ANTLR end "T__11"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__12() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__12() {}

    // $ANTLR start "T__12"
    [GrammarRule("T__12")]
    private void mT__12()
    {
    	EnterRule_T__12();
    	EnterRule("T__12", 3);
    	TraceIn("T__12", 3);
    		try
    		{
    		int _type = T__12;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:11:7: ( '*' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:11:9: '*'
    		{
    		DebugLocation(11, 9);
    		Match('*'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__12", 3);
    		LeaveRule("T__12", 3);
    		LeaveRule_T__12();
        }
    }
    // $ANTLR end "T__12"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__13() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__13() {}

    // $ANTLR start "T__13"
    [GrammarRule("T__13")]
    private void mT__13()
    {
    	EnterRule_T__13();
    	EnterRule("T__13", 4);
    	TraceIn("T__13", 4);
    		try
    		{
    		int _type = T__13;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:12:7: ( '+' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:12:9: '+'
    		{
    		DebugLocation(12, 9);
    		Match('+'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__13", 4);
    		LeaveRule("T__13", 4);
    		LeaveRule_T__13();
        }
    }
    // $ANTLR end "T__13"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__14() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__14() {}

    // $ANTLR start "T__14"
    [GrammarRule("T__14")]
    private void mT__14()
    {
    	EnterRule_T__14();
    	EnterRule("T__14", 5);
    	TraceIn("T__14", 5);
    		try
    		{
    		int _type = T__14;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:13:7: ( '-' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:13:9: '-'
    		{
    		DebugLocation(13, 9);
    		Match('-'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__14", 5);
    		LeaveRule("T__14", 5);
    		LeaveRule_T__14();
        }
    }
    // $ANTLR end "T__14"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__15() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__15() {}

    // $ANTLR start "T__15"
    [GrammarRule("T__15")]
    private void mT__15()
    {
    	EnterRule_T__15();
    	EnterRule("T__15", 6);
    	TraceIn("T__15", 6);
    		try
    		{
    		int _type = T__15;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:14:7: ( '/' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:14:9: '/'
    		{
    		DebugLocation(14, 9);
    		Match('/'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__15", 6);
    		LeaveRule("T__15", 6);
    		LeaveRule_T__15();
        }
    }
    // $ANTLR end "T__15"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__16() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__16() {}

    // $ANTLR start "T__16"
    [GrammarRule("T__16")]
    private void mT__16()
    {
    	EnterRule_T__16();
    	EnterRule("T__16", 7);
    	TraceIn("T__16", 7);
    		try
    		{
    		int _type = T__16;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:15:7: ( ':' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:15:9: ':'
    		{
    		DebugLocation(15, 9);
    		Match(':'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__16", 7);
    		LeaveRule("T__16", 7);
    		LeaveRule_T__16();
        }
    }
    // $ANTLR end "T__16"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__17() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__17() {}

    // $ANTLR start "T__17"
    [GrammarRule("T__17")]
    private void mT__17()
    {
    	EnterRule_T__17();
    	EnterRule("T__17", 8);
    	TraceIn("T__17", 8);
    		try
    		{
    		int _type = T__17;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:16:7: ( '=' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:16:9: '='
    		{
    		DebugLocation(16, 9);
    		Match('='); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__17", 8);
    		LeaveRule("T__17", 8);
    		LeaveRule_T__17();
        }
    }
    // $ANTLR end "T__17"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__18() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__18() {}

    // $ANTLR start "T__18"
    [GrammarRule("T__18")]
    private void mT__18()
    {
    	EnterRule_T__18();
    	EnterRule("T__18", 9);
    	TraceIn("T__18", 9);
    		try
    		{
    		int _type = T__18;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:17:7: ( '{' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:17:9: '{'
    		{
    		DebugLocation(17, 9);
    		Match('{'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__18", 9);
    		LeaveRule("T__18", 9);
    		LeaveRule_T__18();
        }
    }
    // $ANTLR end "T__18"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__19() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__19() {}

    // $ANTLR start "T__19"
    [GrammarRule("T__19")]
    private void mT__19()
    {
    	EnterRule_T__19();
    	EnterRule("T__19", 10);
    	TraceIn("T__19", 10);
    		try
    		{
    		int _type = T__19;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:18:7: ( '}' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:18:9: '}'
    		{
    		DebugLocation(18, 9);
    		Match('}'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__19", 10);
    		LeaveRule("T__19", 10);
    		LeaveRule_T__19();
        }
    }
    // $ANTLR end "T__19"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ID() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ID() {}

    // $ANTLR start "ID"
    [GrammarRule("ID")]
    private void mID()
    {
    	EnterRule_ID();
    	EnterRule("ID", 11);
    	TraceIn("ID", 11);
    		try
    		{
    		int _type = ID;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:49:5: ( 'a' .. 'z' 'a' .. 'z' 'a' .. 'z' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:49:7: 'a' .. 'z' 'a' .. 'z' 'a' .. 'z'
    		{
    		DebugLocation(49, 7);
    		MatchRange('a','z'); 
    		DebugLocation(49, 16);
    		MatchRange('a','z'); 
    		DebugLocation(49, 25);
    		MatchRange('a','z'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ID", 11);
    		LeaveRule("ID", 11);
    		LeaveRule_ID();
        }
    }
    // $ANTLR end "ID"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_CURRENCY() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_CURRENCY() {}

    // $ANTLR start "CURRENCY"
    [GrammarRule("CURRENCY")]
    private void mCURRENCY()
    {
    	EnterRule_CURRENCY();
    	EnterRule("CURRENCY", 12);
    	TraceIn("CURRENCY", 12);
    		try
    		{
    		int _type = CURRENCY;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:52:9: ( FLOAT ID )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:52:11: FLOAT ID
    		{
    		DebugLocation(52, 11);
    		mFLOAT(); 
    		DebugLocation(52, 17);
    		mID(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("CURRENCY", 12);
    		LeaveRule("CURRENCY", 12);
    		LeaveRule_CURRENCY();
        }
    }
    // $ANTLR end "CURRENCY"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_FLOAT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_FLOAT() {}

    // $ANTLR start "FLOAT"
    [GrammarRule("FLOAT")]
    private void mFLOAT()
    {
    	EnterRule_FLOAT();
    	EnterRule("FLOAT", 13);
    	TraceIn("FLOAT", 13);
    		try
    		{
    		int _type = FLOAT;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:55:5: ( ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ SEPARATOR ( '0' .. '9' )* ( EXPONENT )? | SEPARATOR ( '0' .. '9' )+ ( EXPONENT )? )
    		int alt8=3;
    		try { DebugEnterDecision(8, decisionCanBacktrack[8]);
    		try
    		{
    			alt8 = dfa8.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(8); }
    		switch (alt8)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:55:7: ( '0' .. '9' )+ ( EXPONENT )?
    			{
    			DebugLocation(55, 7);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:55:7: ( '0' .. '9' )+
    			int cnt1=0;
    			try { DebugEnterSubRule(1);
    			while (true)
    			{
    				int alt1=2;
    				try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    				int LA1_1 = input.LA(1);

    				if (((LA1_1>='0' && LA1_1<='9')))
    				{
    					alt1 = 1;
    				}


    				} finally { DebugExitDecision(1); }
    				switch (alt1)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:
    					{
    					DebugLocation(55, 7);
    					input.Consume();


    					}
    					break;

    				default:
    					if (cnt1 >= 1)
    						goto loop1;

    					EarlyExitException eee1 = new EarlyExitException( 1, input );
    					DebugRecognitionException(eee1);
    					throw eee1;
    				}
    				cnt1++;
    			}
    			loop1:
    				;

    			} finally { DebugExitSubRule(1); }

    			DebugLocation(55, 19);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:55:19: ( EXPONENT )?
    			int alt2=2;
    			try { DebugEnterSubRule(2);
    			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    			int LA2_1 = input.LA(1);

    			if ((LA2_1=='e'))
    			{
    				alt2 = 1;
    			}
    			} finally { DebugExitDecision(2); }
    			switch (alt2)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:55:19: EXPONENT
    				{
    				DebugLocation(55, 19);
    				mEXPONENT(); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(2); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:56:9: ( '0' .. '9' )+ SEPARATOR ( '0' .. '9' )* ( EXPONENT )?
    			{
    			DebugLocation(56, 9);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:56:9: ( '0' .. '9' )+
    			int cnt3=0;
    			try { DebugEnterSubRule(3);
    			while (true)
    			{
    				int alt3=2;
    				try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    				int LA3_1 = input.LA(1);

    				if (((LA3_1>='0' && LA3_1<='9')))
    				{
    					alt3 = 1;
    				}


    				} finally { DebugExitDecision(3); }
    				switch (alt3)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:
    					{
    					DebugLocation(56, 9);
    					input.Consume();


    					}
    					break;

    				default:
    					if (cnt3 >= 1)
    						goto loop3;

    					EarlyExitException eee3 = new EarlyExitException( 3, input );
    					DebugRecognitionException(eee3);
    					throw eee3;
    				}
    				cnt3++;
    			}
    			loop3:
    				;

    			} finally { DebugExitSubRule(3); }

    			DebugLocation(56, 21);
    			mSEPARATOR(); 
    			DebugLocation(56, 31);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:56:31: ( '0' .. '9' )*
    			try { DebugEnterSubRule(4);
    			while (true)
    			{
    				int alt4=2;
    				try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    				int LA4_1 = input.LA(1);

    				if (((LA4_1>='0' && LA4_1<='9')))
    				{
    					alt4 = 1;
    				}


    				} finally { DebugExitDecision(4); }
    				switch ( alt4 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:
    					{
    					DebugLocation(56, 31);
    					input.Consume();


    					}
    					break;

    				default:
    					goto loop4;
    				}
    			}

    			loop4:
    				;

    			} finally { DebugExitSubRule(4); }

    			DebugLocation(56, 43);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:56:43: ( EXPONENT )?
    			int alt5=2;
    			try { DebugEnterSubRule(5);
    			try { DebugEnterDecision(5, decisionCanBacktrack[5]);
    			int LA5_1 = input.LA(1);

    			if ((LA5_1=='e'))
    			{
    				alt5 = 1;
    			}
    			} finally { DebugExitDecision(5); }
    			switch (alt5)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:56:43: EXPONENT
    				{
    				DebugLocation(56, 43);
    				mEXPONENT(); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(5); }


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:57:9: SEPARATOR ( '0' .. '9' )+ ( EXPONENT )?
    			{
    			DebugLocation(57, 9);
    			mSEPARATOR(); 
    			DebugLocation(57, 19);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:57:19: ( '0' .. '9' )+
    			int cnt6=0;
    			try { DebugEnterSubRule(6);
    			while (true)
    			{
    				int alt6=2;
    				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
    				int LA6_1 = input.LA(1);

    				if (((LA6_1>='0' && LA6_1<='9')))
    				{
    					alt6 = 1;
    				}


    				} finally { DebugExitDecision(6); }
    				switch (alt6)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:
    					{
    					DebugLocation(57, 19);
    					input.Consume();


    					}
    					break;

    				default:
    					if (cnt6 >= 1)
    						goto loop6;

    					EarlyExitException eee6 = new EarlyExitException( 6, input );
    					DebugRecognitionException(eee6);
    					throw eee6;
    				}
    				cnt6++;
    			}
    			loop6:
    				;

    			} finally { DebugExitSubRule(6); }

    			DebugLocation(57, 31);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:57:31: ( EXPONENT )?
    			int alt7=2;
    			try { DebugEnterSubRule(7);
    			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
    			int LA7_1 = input.LA(1);

    			if ((LA7_1=='e'))
    			{
    				alt7 = 1;
    			}
    			} finally { DebugExitDecision(7); }
    			switch (alt7)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:57:31: EXPONENT
    				{
    				DebugLocation(57, 31);
    				mEXPONENT(); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(7); }


    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("FLOAT", 13);
    		LeaveRule("FLOAT", 13);
    		LeaveRule_FLOAT();
        }
    }
    // $ANTLR end "FLOAT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_SEPARATOR() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_SEPARATOR() {}

    // $ANTLR start "SEPARATOR"
    [GrammarRule("SEPARATOR")]
    private void mSEPARATOR()
    {
    	EnterRule_SEPARATOR();
    	EnterRule("SEPARATOR", 14);
    	TraceIn("SEPARATOR", 14);
    		try
    		{
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:62:11: ( ( '.' | ',' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:
    		{
    		DebugLocation(62, 11);
    		if (input.LA(1)==','||input.LA(1)=='.')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("SEPARATOR", 14);
    		LeaveRule("SEPARATOR", 14);
    		LeaveRule_SEPARATOR();
        }
    }
    // $ANTLR end "SEPARATOR"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_EXPONENT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_EXPONENT() {}

    // $ANTLR start "EXPONENT"
    [GrammarRule("EXPONENT")]
    private void mEXPONENT()
    {
    	EnterRule_EXPONENT();
    	EnterRule("EXPONENT", 15);
    	TraceIn("EXPONENT", 15);
    		try
    		{
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:64:9: ( 'e' ( '+' | '-' )? ( '0' .. '9' )+ )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:64:11: 'e' ( '+' | '-' )? ( '0' .. '9' )+
    		{
    		DebugLocation(64, 11);
    		Match('e'); 
    		DebugLocation(64, 15);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:64:15: ( '+' | '-' )?
    		int alt9=2;
    		try { DebugEnterSubRule(9);
    		try { DebugEnterDecision(9, decisionCanBacktrack[9]);
    		int LA9_1 = input.LA(1);

    		if ((LA9_1=='+'||LA9_1=='-'))
    		{
    			alt9 = 1;
    		}
    		} finally { DebugExitDecision(9); }
    		switch (alt9)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:
    			{
    			DebugLocation(64, 15);
    			input.Consume();


    			}
    			break;

    		}
    		} finally { DebugExitSubRule(9); }

    		DebugLocation(64, 26);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:64:26: ( '0' .. '9' )+
    		int cnt10=0;
    		try { DebugEnterSubRule(10);
    		while (true)
    		{
    			int alt10=2;
    			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
    			int LA10_1 = input.LA(1);

    			if (((LA10_1>='0' && LA10_1<='9')))
    			{
    				alt10 = 1;
    			}


    			} finally { DebugExitDecision(10); }
    			switch (alt10)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:
    				{
    				DebugLocation(64, 26);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt10 >= 1)
    					goto loop10;

    				EarlyExitException eee10 = new EarlyExitException( 10, input );
    				DebugRecognitionException(eee10);
    				throw eee10;
    			}
    			cnt10++;
    		}
    		loop10:
    			;

    		} finally { DebugExitSubRule(10); }


    		}

    	}
    	finally
    	{
    		TraceOut("EXPONENT", 15);
    		LeaveRule("EXPONENT", 15);
    		LeaveRule_EXPONENT();
        }
    }
    // $ANTLR end "EXPONENT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NEWLINE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NEWLINE() {}

    // $ANTLR start "NEWLINE"
    [GrammarRule("NEWLINE")]
    private void mNEWLINE()
    {
    	EnterRule_NEWLINE();
    	EnterRule("NEWLINE", 16);
    	TraceIn("NEWLINE", 16);
    		try
    		{
    		int _type = NEWLINE;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:65:9: ( ( '\\r' )? '\\n' )
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:65:11: ( '\\r' )? '\\n'
    		{
    		DebugLocation(65, 11);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:65:11: ( '\\r' )?
    		int alt11=2;
    		try { DebugEnterSubRule(11);
    		try { DebugEnterDecision(11, decisionCanBacktrack[11]);
    		int LA11_1 = input.LA(1);

    		if ((LA11_1=='\r'))
    		{
    			alt11 = 1;
    		}
    		} finally { DebugExitDecision(11); }
    		switch (alt11)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:65:11: '\\r'
    			{
    			DebugLocation(65, 11);
    			Match('\r'); 

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(11); }

    		DebugLocation(65, 17);
    		Match('\n'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NEWLINE", 16);
    		LeaveRule("NEWLINE", 16);
    		LeaveRule_NEWLINE();
        }
    }
    // $ANTLR end "NEWLINE"

    public override void mTokens()
    {
    	// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:1:8: ( T__10 | T__11 | T__12 | T__13 | T__14 | T__15 | T__16 | T__17 | T__18 | T__19 | ID | CURRENCY | FLOAT | NEWLINE )
    	int alt12=14;
    	try { DebugEnterDecision(12, decisionCanBacktrack[12]);
    	try
    	{
    		alt12 = dfa12.Predict(input);
    	}
    	catch (NoViableAltException nvae)
    	{
    		DebugRecognitionException(nvae);
    		throw;
    	}
    	} finally { DebugExitDecision(12); }
    	switch (alt12)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:1:10: T__10
    		{
    		DebugLocation(1, 10);
    		mT__10(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:1:16: T__11
    		{
    		DebugLocation(1, 16);
    		mT__11(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:1:22: T__12
    		{
    		DebugLocation(1, 22);
    		mT__12(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:1:28: T__13
    		{
    		DebugLocation(1, 28);
    		mT__13(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:1:34: T__14
    		{
    		DebugLocation(1, 34);
    		mT__14(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:1:40: T__15
    		{
    		DebugLocation(1, 40);
    		mT__15(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:1:46: T__16
    		{
    		DebugLocation(1, 46);
    		mT__16(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:1:52: T__17
    		{
    		DebugLocation(1, 52);
    		mT__17(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:1:58: T__18
    		{
    		DebugLocation(1, 58);
    		mT__18(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:1:64: T__19
    		{
    		DebugLocation(1, 64);
    		mT__19(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:1:70: ID
    		{
    		DebugLocation(1, 70);
    		mID(); 

    		}
    		break;
    	case 12:
    		DebugEnterAlt(12);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:1:73: CURRENCY
    		{
    		DebugLocation(1, 73);
    		mCURRENCY(); 

    		}
    		break;
    	case 13:
    		DebugEnterAlt(13);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:1:82: FLOAT
    		{
    		DebugLocation(1, 82);
    		mFLOAT(); 

    		}
    		break;
    	case 14:
    		DebugEnterAlt(14);
    		// C:\\Users\\illus\\OneDrive\\Документы\\Visual Studio 2015\\Projects\\Calculator\\GrammarOfCurrency.g:1:88: NEWLINE
    		{
    		DebugLocation(1, 88);
    		mNEWLINE(); 

    		}
    		break;

    	}

    }


	#region DFA
	DFA8 dfa8;
	DFA12 dfa12;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa8 = new DFA8(this);
		dfa12 = new DFA12(this);
	}

	private class DFA8 : DFA
	{
		private const string DFA8_eotS =
			"\x1\xFFFF\x1\x3\x3\xFFFF";
		private const string DFA8_eofS =
			"\x5\xFFFF";
		private const string DFA8_minS =
			"\x2\x2C\x3\xFFFF";
		private const string DFA8_maxS =
			"\x2\x39\x3\xFFFF";
		private const string DFA8_acceptS =
			"\x2\xFFFF\x1\x3\x1\x1\x1\x2";
		private const string DFA8_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA8_transitionS =
			{
				"\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x4\x1\xFFFF\x1\x4\x1\xFFFF\xA\x1",
				"",
				"",
				""
			};

		private static readonly short[] DFA8_eot = DFA.UnpackEncodedString(DFA8_eotS);
		private static readonly short[] DFA8_eof = DFA.UnpackEncodedString(DFA8_eofS);
		private static readonly char[] DFA8_min = DFA.UnpackEncodedStringToUnsignedChars(DFA8_minS);
		private static readonly char[] DFA8_max = DFA.UnpackEncodedStringToUnsignedChars(DFA8_maxS);
		private static readonly short[] DFA8_accept = DFA.UnpackEncodedString(DFA8_acceptS);
		private static readonly short[] DFA8_special = DFA.UnpackEncodedString(DFA8_specialS);
		private static readonly short[][] DFA8_transition;

		static DFA8()
		{
			int numStates = DFA8_transitionS.Length;
			DFA8_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA8_transition[i] = DFA.UnpackEncodedString(DFA8_transitionS[i]);
			}
		}

		public DFA8( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 8;
			this.eot = DFA8_eot;
			this.eof = DFA8_eof;
			this.min = DFA8_min;
			this.max = DFA8_max;
			this.accept = DFA8_accept;
			this.special = DFA8_special;
			this.transition = DFA8_transition;
		}

		public override string Description { get { return "54:1: FLOAT : ( ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ SEPARATOR ( '0' .. '9' )* ( EXPONENT )? | SEPARATOR ( '0' .. '9' )+ ( EXPONENT )? );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA12 : DFA
	{
		private const string DFA12_eotS =
			"\xC\xFFFF\x1\x10\x5\xFFFF\x2\x10\x1\xFFFF\x2\x10\x3\xFFFF\x1\x10\x1\xFFFF"+
			"\x1\x10";
		private const string DFA12_eofS =
			"\x1D\xFFFF";
		private const string DFA12_minS =
			"\x1\xA\xB\xFFFF\x1\x2C\x1\x30\x1\xFFFF\x1\x2B\x2\xFFFF\x5\x30\x2\x2B"+
			"\x4\x30";
		private const string DFA12_maxS =
			"\x1\x7D\xB\xFFFF\x1\x7A\x1\x39\x1\xFFFF\x1\x7A\x2\xFFFF\x2\x7A\x1\x39"+
			"\x4\x7A\x1\x39\x1\x7A\x1\x39\x1\x7A";
		private const string DFA12_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA"+
			"\x1\xB\x2\xFFFF\x1\xE\x1\xFFFF\x1\xD\x1\xC\xB\xFFFF";
		private const string DFA12_specialS =
			"\x1D\xFFFF}>";
		private static readonly string[] DFA12_transitionS =
			{
				"\x1\xE\x2\xFFFF\x1\xE\x1A\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\xD\x1\x5"+
				"\x1\xD\x1\x6\xA\xC\x1\x7\x2\xFFFF\x1\x8\x23\xFFFF\x1A\xB\x1\x9\x1\xFFFF"+
				"\x1\xA",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x12\x1\xFFFF\x1\x12\x1\xFFFF\xA\xC\x27\xFFFF\x4\x11\x1\xF\x15\x11",
				"\xA\x13",
				"",
				"\x1\x14\x1\xFFFF\x1\x14\x2\xFFFF\xA\x15\x27\xFFFF\x1A\x11",
				"",
				"",
				"\xA\x16\x27\xFFFF\x4\x11\x1\x17\x15\x11",
				"\xA\x13\x27\xFFFF\x4\x11\x1\x18\x15\x11",
				"\xA\x15",
				"\xA\x15\x27\xFFFF\x1A\x11",
				"\xA\x16\x27\xFFFF\x4\x11\x1\x17\x15\x11",
				"\x1\x19\x1\xFFFF\x1\x19\x2\xFFFF\xA\x1A\x27\xFFFF\x1A\x11",
				"\x1\x1B\x1\xFFFF\x1\x1B\x2\xFFFF\xA\x1C\x27\xFFFF\x1A\x11",
				"\xA\x1A",
				"\xA\x1A\x27\xFFFF\x1A\x11",
				"\xA\x1C",
				"\xA\x1C\x27\xFFFF\x1A\x11"
			};

		private static readonly short[] DFA12_eot = DFA.UnpackEncodedString(DFA12_eotS);
		private static readonly short[] DFA12_eof = DFA.UnpackEncodedString(DFA12_eofS);
		private static readonly char[] DFA12_min = DFA.UnpackEncodedStringToUnsignedChars(DFA12_minS);
		private static readonly char[] DFA12_max = DFA.UnpackEncodedStringToUnsignedChars(DFA12_maxS);
		private static readonly short[] DFA12_accept = DFA.UnpackEncodedString(DFA12_acceptS);
		private static readonly short[] DFA12_special = DFA.UnpackEncodedString(DFA12_specialS);
		private static readonly short[][] DFA12_transition;

		static DFA12()
		{
			int numStates = DFA12_transitionS.Length;
			DFA12_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA12_transition[i] = DFA.UnpackEncodedString(DFA12_transitionS[i]);
			}
		}

		public DFA12( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 12;
			this.eot = DFA12_eot;
			this.eof = DFA12_eof;
			this.min = DFA12_min;
			this.max = DFA12_max;
			this.accept = DFA12_accept;
			this.special = DFA12_special;
			this.transition = DFA12_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__10 | T__11 | T__12 | T__13 | T__14 | T__15 | T__16 | T__17 | T__18 | T__19 | ID | CURRENCY | FLOAT | NEWLINE );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace  Generated 
